<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>混淆 on 你好，世界</title>
    <link>/categories/%E6%B7%B7%E6%B7%86/</link>
    <description>Recent content in 混淆 on 你好，世界</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>来自某个八零后</copyright>
    <lastBuildDate>Sat, 17 Jan 2015 08:01:38 +0000</lastBuildDate>
    
	<atom:link href="/categories/%E6%B7%B7%E6%B7%86/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Proguard混淆</title>
      <link>/posts/proguard-obfuscation/</link>
      <pubDate>Sat, 17 Jan 2015 08:01:38 +0000</pubDate>
      
      <guid>/posts/proguard-obfuscation/</guid>
      <description>这里仅仅说Android的混淆，其他平台基本相同。
不同的IDE有不同的配置方法。
Android Studio的配置略有差异，可以参考前文
混淆的大致原理就是rename class（所以混淆的过程比较慢），混淆的初衷，并不是为了不让人看源码，毕竟java的虚拟机机制就决定了，源码肯定是可以反编译出来的；其主要目的是让反编译后的代码“难以”看懂。
例如打开一个混淆后输出的mapping文件，可以看到：
（某代码片段，请无视。）
这样一来，反编译后的代码里面，基本就是a.b.c(d.e)这种代码（也许原来只是Util.isNetworkAvailable(context)），大大增加了阅读难度；也就达到了防止反编译的目的。
但经常会误伤，因为是rename，所以对name敏感（依赖name）的方法或者库就会无法正常工作。例如反射，例如JNI的接口class（依赖class name来找context object），例如GSON这些常用工具库。
解决办法就是修改proguard的配置文件，将这些敏感class置为例外。
常用方法如下：
 排除指定类A
-keepclassmembers class com.xxx.xxx.A { *; }   将类A的子类全部排除 language-bash -keepclassmembers class * extends com.xxx.xxx.A { *; }   将包P内的class全部排除
-keep public class com.xxx.P.* { *; }   将包P内的class及subclass全部排除 language-bash -keep public class com.xxx.P.** { *; }     注意*和**的差别；
注意最后的{ *; }，用法很多，可以指定仅排除public/protected，如：
{ public protected *;}  当然还可以直接更直接一些：
{ &amp;lt;fields&amp;gt;; &amp;lt;methods&amp;gt;; }  如果是使用Gson的话，还可以直接如下使用方式来避免混淆问题：</description>
    </item>
    
  </channel>
</rss>