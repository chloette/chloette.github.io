<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hello Friend</title>
    <link>/</link>
    <description>Recent content on Hello Friend</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 04 Mar 2018 22:34:32 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to compile AOSP on Mac 10.13</title>
      <link>/posts/how-to-compile-aosp-on-mac-s/</link>
      <pubDate>Sun, 04 Mar 2018 22:34:32 +0000</pubDate>
      
      <guid>/posts/how-to-compile-aosp-on-mac-s/</guid>
      <description>Follow : https://source.android.com/setup/initializing
Then you may meet one compile error:
FAILED: out/soong/.intermediates/system/tools/aidl/libaidl-common/darwin_x8664static/gen/yacc/system/tools/aidl/aidl_language_y.cpp out/soong/.intermediates/system/tools/aidl/libaidl-common/darwin_x8664static/gen/yacc/system/tools/aidl/aidl_language_y.h BISON_PKGDATADIR=external/bison/data prebuilts/misc/darwin-x86/bison/bison -d --defines=out/soong/.intermediates/system/tools/aidl/libaidl-common/darwin_x8664static/gen/yacc/system/tools/aidl/aidl_language_y.h -o out/soong/.intermediates/system/tools/aidl/libaidl-common/darwin_x8664static/gen/yacc/system/tools/aidl/aidl_language_y.cpp system/tools/aidl/aidl_language_y.yy  Then do this:
1.Patch bison fix for High Sierra and build bison: cd /Volumes/AOSP/external/bison git cherry-pick c0c852bd6fe462b148475476d9124fd740eba160 mm 2.Replace prebuilt bison binary with patched binary cp /Volumes/AOSP/out/host/darwin-x86/bin/bison /Volumes/AOSP/prebuilts/misc/darwin-x86/bison/ 3.Build  </description>
    </item>
    
    <item>
      <title>跨年</title>
      <link>/posts/kua-nian/</link>
      <pubDate>Mon, 01 Jan 2018 07:02:29 +0000</pubDate>
      
      <guid>/posts/kua-nian/</guid>
      <description>在2017年的最后这一小时，有些话还是得说说；
过去这几年过的确实太累；
累的兵荒马乱的；这儿也很久不更了；
2018也不见得可以更好；
但至少我还在不断努力中；
还没停下脚步；
现在觉得，
有些方向如果走不通就算了；
有些生活如果过不下去就换了；
有些事情如果解决不了就过了；
人生总得向前看；
总回头，太容易患得患失；
自己的人生，何必太拘泥于套路。
2018，请多指教。</description>
    </item>
    
    <item>
      <title>git push遇到no matching key exchange method found</title>
      <link>/posts/git-pushyu-dao-no-matching-key-exchange-method-found/</link>
      <pubDate>Sun, 22 Jan 2017 13:10:53 +0000</pubDate>
      
      <guid>/posts/git-pushyu-dao-no-matching-key-exchange-method-found/</guid>
      <description>没啥好办法。
参考Using “KexAlgorithms diffie-hellman-group1-sha1” did not resolve “no matching key exchange method found” error
export GIT_SSH_COMMAND=&#39;ssh -o KexAlgorithms=+diffie-hellman-group1-sha1&#39;
Must be called every time you open the Git Bash. Yeah, git is hell.</description>
    </item>
    
    <item>
      <title>虚拟机做android N全编译报GC问题</title>
      <link>/posts/xu-ni-ji-zuo-android-nquan-bian-yi-bao-gcwen-ti/</link>
      <pubDate>Sat, 21 Jan 2017 23:41:37 +0000</pubDate>
      
      <guid>/posts/xu-ni-ji-zuo-android-nquan-bian-yi-bao-gcwen-ti/</guid>
      <description>在外出差拖着虚拟机，遇到build编译问题简直崩溃； Google一下一大把解决方法，但靠谱的没几个；
可以参考： Try increasing heap size with java option &amp;lsquo;-Xmx&amp;lsquo;
亲测有效：
export JACK_SERVER_VM_ARGUMENTS=&amp;quot;-Dfile.encoding=UTF-8 -XX:+TieredCompilation -Xmx4g&amp;quot;
./prebuilts/sdk/tools/jack-admin kill-server
./prebuilts/sdk/tools/jack-admin start-server</description>
    </item>
    
    <item>
      <title>如何拯救手欠做了Git reset hard</title>
      <link>/posts/ru-he-zheng-jiu-shou-qian-zuo-liao-git-reset-hard/</link>
      <pubDate>Wed, 18 Jan 2017 02:49:48 +0000</pubDate>
      
      <guid>/posts/ru-he-zheng-jiu-shou-qian-zuo-liao-git-reset-hard/</guid>
      <description>$ git reflog show
93567ad HEAD@{0}: reset: moving to HEAD@{6}
203e84e HEAD@{1}: reset: moving to HEAD@{1}
9937a76 HEAD@{2}: reset: moving to HEAD@{2} 203e84e HEAD@{3}: checkout: moving from master to master 203e84e HEAD@{4}: reset: moving to HEAD~1 9937a76 HEAD@{5}: reset: moving to HEAD~1 d5bb59f HEAD@{6}: reset: moving to HEAD~1 9300f9d HEAD@{7}: commit: fix-bug
// said the commit to be recovered back is on 9300f9d
$ git reset HEAD@{7}
人生就是这么跌宕起伏。。。</description>
    </item>
    
    <item>
      <title>Ubuntu forgot password</title>
      <link>/posts/ubuntu-forgot-password/</link>
      <pubDate>Wed, 14 Oct 2015 07:14:29 +0000</pubDate>
      
      <guid>/posts/ubuntu-forgot-password/</guid>
      <description>Ubuntu忘记密码了。。
试了半天，还是想不起来。
搜了一遍，如果依然可以开机长按shift进入recovery界面，那可以试试这样Ubuntu 14.04忘记root密码的解决方法
但我是连recovery界面都进不去了，那只能用下面的方法了~
 搞一个ubuntu启动盘
 开机启动，并进入启动页面
 选择Try Ubuntu
 找到之前的系统盘下/etc/shadow
 sudo下通过vim打开并编辑，去掉自己账号后面的密码串（可以参考这里）
 重启正常启动原来系统即可，会发现忘记密码的用户可以直接登陆进去了；登陆后抓紧passwd修改密码吧！！！
  Tada~~</description>
    </item>
    
    <item>
      <title>那些网络暴力</title>
      <link>/posts/shuo-shuo-na-xie-wang-luo-bao-li/</link>
      <pubDate>Sat, 10 Oct 2015 07:22:28 +0000</pubDate>
      
      <guid>/posts/shuo-shuo-na-xie-wang-luo-bao-li/</guid>
      <description>自从“我爸是李刚”的事件发酵膨胀并最终让我知道“真相”后，我才渐渐意识到，自己无意间的一言一行，对他人造成了多大的伤害。
。。。
“你们谁有手机赶紧报警”
“我爸是李刚”
“我不会跑的”
。。。
这只是众多事件中的一个小小缩影，太多的事情，背后有着我们所不知道的真相。而很多人，选择去相信的，是另外一个“真相”；那是他们内心期望着的那个“真相”；
他们相信，开豪车的就一定是不义之财，绝不可能是辛苦赚来的；所以被三轮车夫撞了，就不能要求三轮车夫赔钱；因为他们认为，你都开豪车了，何必和三轮车夫斤斤计较；
他们相信，女神都是傍大款，绝不是情投意合；所以如果女神同意出去吃个饭，那一定是要喜当爹；毕竟，自己那点屌丝气质，女神那种傍大款的绿茶婊，怎么可能因为某个大排档好吃就赏脸面基；
他们相信，富二代都是傻逼，只会把妹开跑车泡夜店；不然怎么会有七十码；他们只看到了王思聪身边的妹纸流水转，没看到王思聪的公司估值翻番；
他们相信，美国/德国的车子要比日本车结实的多，神马《消费者指南》一定是被收买了；
他们相信的，是符合他们“认为的”；但凡和他们“认为的”不一样，那就是“内幕/黑手”。
看过《十二怒汉》（国内有对应的接地气版本《十二公民》），就会明白，当你的一言一行，影响到的是另外一个人的前程，未来，甚至一生的时候；再谨慎再小心再细致入微再吹毛求疵，都不为过。
再到后来的诸多事件，每次有一个“事件”发生的时候，总会有人/舆论把整个事件向一个更容易“聒噪”的方向推。最终一个小事情真的成了事件，当事人就都成了受害人，舆论成功占到了道德制高点，然后就没有然后了。
没有其他人收尾。
最终的苦难，和舆论无关，和你无关，和我无关，和键盘侠，暴民们无关，只和那些舆论中心的当事人有关；毕竟，这悲催的，被舆论撕扯开，毫无保留甚至放大后展现在各位面前的，不是你我的满目疮痍的人生，而是曾经面朝大海春暖花开曾经茶米油盐酱醋茶的当事人啊；
这一切，从聚光灯下，到尘埃落定，需要多久，需要多艰难，多痛苦，多少非议，多少指指点点，你我又怎可知；
也许你我只是动动口，敲敲键盘；
但对他人造成的伤害，是同样动动口，敲敲键盘就可以抹平的么。。。
后来每每念及此，再想起当年自己也算是网络暴民，键盘侠，喷子，水军吧（自来水？）都不禁默默期望，期望那些被我伤害过的人，现在安好；
不求原谅，但求心安。</description>
    </item>
    
    <item>
      <title>1937年的差速器科普视频</title>
      <link>/posts/around-the-corner/</link>
      <pubDate>Fri, 09 Oct 2015 06:45:27 +0000</pubDate>
      
      <guid>/posts/around-the-corner/</guid>
      <description>很久木有更新了。。。忙的晕头转向了。
1937年的差速器科普视频！浅显易懂~ 分享一下~
视频如下：
 </description>
    </item>
    
    <item>
      <title>Android支持按键双击事件</title>
      <link>/posts/android-support-double-tap/</link>
      <pubDate>Sat, 20 Jun 2015 08:35:16 +0000</pubDate>
      
      <guid>/posts/android-support-double-tap/</guid>
      <description>最近做的东西比较杂，是得梳理一下了~
参考了这篇文章。
按键双击，这种组合键的做法类似volume down键 + power键 = 截屏
因为两个按键之间肯定会有时间差，而双击其实就是x键 + x键；
开翻~
Android上keyevent，在framework层是由window manager来负责转发，找到PhoneWindowManager，会发现这里对于keyevent的各种intercept简直就是hook的绝佳地点：
interceptKeyBeforeDispatching(WindowState win, KeyEvent event, int policyFlags)
interceptKeyBeforeQueueing(KeyEvent event, int policyFlags)
等。。。
找到interceptKeyBeforeDispatching对volume down + power的处理（或者直接参考mHomeDoubleTapTimeoutRunnable），参考即可（可以顺着mVolumeDownKeyTriggered去看在哪里触发，在哪里判定tolerance的）
基本流程就是： volume down先被点击的时候，记录下来时间； power点击的时候，判断是否在tolerance里面； 同理，power先被点击的时候，一样记录下来时间； 在volume down被点击的时候，判断是否在tolerance里面；
这样就确定了是否是截屏“操作”，如果是，就consume这个事件（不再向上转发，直接return掉）；同时通过mScreenshotRunnable去截屏。
同样，双击事件也一样（甚至更简单），前一次点击纪录下来时间，下次点击计算是否在tolerance中即可（就不贴代码了，因为太懒（烂）了。。。）
其实L的代码，在window manager这里已经实现了volume down + power、volume up + power、 double tap home；参考对应的来实现一个即可。
还有一点就是如何在屏幕没点亮的时候监听按键；
在interceptKeyBeforeQueueing中找到interactive，（还没试，应该是用这个来决定是否screen on）
就这个啦，即使这个为false的时候依然把keyevent传递出去就好了~ （或者简单点就参考power键~ ）
基本如上~
TADA~</description>
    </item>
    
    <item>
      <title>用Selinux遇到的限制</title>
      <link>/posts/selinux-limitation/</link>
      <pubDate>Sat, 20 Jun 2015 06:58:44 +0000</pubDate>
      
      <guid>/posts/selinux-limitation/</guid>
      <description>（一停手就是若干年啊。。。）
在做一个有趣的小功能，具体什么就不说了。中途遇到了一个问题，media进程直接写文件的时候无权限：
fopen后strerrno(errno)是：permission denied.
翻了翻，应该是sepolicy（selinux）的限制导致的。
找到篇文章大概介绍了selinux和sepolicy设置（android L开始是建议厂商强制使用的）
还有一篇更偏实用。
打开/external/sepolicy/mediaserver.te
（其实还有一个device/qcom/sepolicy/common/mediaserver.te，暂未确认是用哪个，还是做了一个交集）
但可以确认的是camera_data_file应该是可写的：
allow mediaserver camera_data_file:dir rw_dir_perms; allow mediaserver camera_data_file:file create_file_perms;
那具体camera_data_file是哪里那？继续翻：
在/external/sepolicy/file_contexts里面：
/data/misc/camera(/.*)? u:object_r:camera_data_file:s0
既然这样，那就直接往这个目录下面写吧~
改完测试，一切OK~</description>
    </item>
    
    <item>
      <title>关于Camera（成像）</title>
      <link>/posts/about-camera-sensor-1/</link>
      <pubDate>Sun, 03 May 2015 14:23:04 +0000</pubDate>
      
      <guid>/posts/about-camera-sensor-1/</guid>
      <description>其实早就想写，但这种题目会让模电考试作弊才堪堪及格的我压力山大。。。
注意：这里的camera，基本指目前绝大多数的电子成像设备。
本文从一个有基本理科知识的角度，来科普性质的讲讲图像传感器都干了些什么（才助力陈老师造福全人类的）。当然也一定会有遗漏缺失错误的地方（不吝指出~）
本文很多内容，是基于《CMOS图像传感器集成电路原理、设计和应用》（罗昕 编著），这本书不错，让我重新梳理所学，值得看一看~
#####小孔成像
在说到图像传感器前，先说说小孔成像；这是目前所有成像技术的光学基础 &amp;ndash; 光是直线传播的（在忽略引力作用的前提下）：
尽管我不喜欢baidu，但是这篇百科中，墨子如是说：
 “景。光之人，煦若射，下者之人也高；高者之人也下。足蔽下光，故成景于上；首蔽上光，故成景于下。在远近有端，与于光，故景库内也。”
 用通俗的话说，就是说照射在人身上的光线，（反射出去）就像射出去的箭；下面的光也会（反）射向上方，上部的光也会（反）射向下方，（通过小孔时），小孔下半部分挡住了下面的光，所以足部成像在上面；小孔上半部分挡住了上面的光，所以头部成像在下面。
墨子居然就这么轻描淡写的，阐述了：光是直线传播的。
######有个疑问是，那小孔变成大孔那？为何不能成像了？
因为。。。假设大孔无限大，这样反射光就全无遮拦无过滤的混在一起了，光线们都没羞没躁的混在一起，就是白色（总觉得哪里不太对啊嘿嘿嘿）了嘛。
基于此，人类有了真实记录自己的理论依据。
再之后，通过对感光材料的研究，人类发明了照片。
#####既然已经知道了成像的原理，那camera如何成像的？
分三步：
 把冰箱门打开 把大象推进去 把冰箱门关上  。。。好吧其实是这么几步：
 光，打到sensor（像素阵列每个像素的）光电二极管上，激发电荷  &amp;mdash;如果是CCD
 逐行逐列的读取 电荷信号经过电荷-电压转换电路转换成模拟电压信号 电压信号通过常规模拟电子电路实现放大  &amp;mdash;如果是CMOS
 激发后的电荷通过像素上的电路转换为电压并放大 逐行逐列的读取  &amp;mdash;结束如果
 通过模数转换将模拟电压信号转换为数字信号 通过差分传输将数据从sensor传输到isp ISP将sensor传出的数据（根据pattern不同，目前主流是bayer的GRGB结构）进行整帧组装 ISP开始对这一帧进行处理（如lens shading，color enhancement, crop等），最终输出YUV（或其他常规格式）的整帧数据。（这里先忽略3A） Jpeg encoder（目前主流均已hw化了）将整帧数据写入jpeg文件（因为上面忽略了3A，这里的exif也顺带忽略~） 恩，可以上传照片到朋友圈了  似乎有点复杂，简化下：
光 -&amp;gt; 1.光电二极管 -&amp;gt; 2.生成电荷 -&amp;gt; 3.转换到电压并放大信号 -&amp;gt; 4.阵列化逐行逐列输出 -&amp;gt; 5.电压信号模数转换到数字信号 -&amp;gt; 6.传输给ISP -&amp;gt; 7.ISP处理成YUV -&amp;gt; 8.</description>
    </item>
    
    <item>
      <title>拆拆补补又三年</title>
      <link>/posts/chai-chai-bu-bu-you-san-nian/</link>
      <pubDate>Sun, 26 Apr 2015 09:26:35 +0000</pubDate>
      
      <guid>/posts/chai-chai-bu-bu-you-san-nian/</guid>
      <description>这是一个悲伤的故事：
T410已经服役多年，尽管上了MBP，也一直没找到它的好归宿；
直到前段时间，风扇又因为“诡异”的原因（T410的fan error简直可以开专栏了），开机自检过不了了；
然后我及时祭出作案小工具：
开始拆拆拆，最后动用了吸尘器，风扇终于可以愉快的转起来了~
本以为告一段落，全部拧回去吧~
结果。。。
在螺旋丸插入这个洞的时候：
用错了螺丝，插太深了。。。直接把网卡兄爆菊了：
T_T
每次开机就报1802（这也是可以浓墨重彩的写上一笔的主题啊。。。）
还好有万能的淘宝~ 速度下单~
等过几天重新给它颗连接世界的心~
世界那么大，你也去看看~</description>
    </item>
    
    <item>
      <title>相对论</title>
      <link>/posts/theory-of-relativity/</link>
      <pubDate>Sun, 12 Apr 2015 11:40:13 +0000</pubDate>
      
      <guid>/posts/theory-of-relativity/</guid>
      <description>前几天内部分享，居然是狭义相对论。。。必须赞~
本来也不太明白的东西，居然被90后的年轻同事讲明白了。
相当给力~
基本颠覆了经典力学，2个小时多的分享，让人三观崩塌。。。
狭义相对论的核心：
光速不变 &amp;ndash; 不仅仅是光速本身，即使光源高速运动，光速依然不变。和光源移动无关（而不是经典力学以为的v&#39; = c + v） ；并且通过一个设计巧妙的实验（迈克耳孙－莫雷实验）验证了光速不变
在此基础上，经典力学的公式推导为：
有助于理解的一点在于，狭义相对论中，没有“绝对参考系”；再就是，时间不是独立于空间的一维，而是统一的整体。
但同时，狭义相对论本身存在一些理论缺陷，即双生子佯谬（尽管wiki上用了另外一种解释来圆这个问题）
爱因斯坦接着发表了广义相对论
其对加速度部分的补充说明解决了双生子佯谬。
还好分享到此为止了，不然无法承受这么知识体系层面的崩塌。。。
突然想到，
1905年狭义相对论发表后，四十年后，据此推导的E=mc^2促成了原子弹的发明，更快的结束了二战。
短短四十年便理论到现实，那些年的基础理论简直光芒闪耀不可直视。
不知不觉又想起了《三体》里那一千八百万年的一霎那。。。
就这样吧。</description>
    </item>
    
    <item>
      <title>Android Camera HAL3.0</title>
      <link>/posts/android-camera-hal3-0/</link>
      <pubDate>Sat, 11 Apr 2015 07:15:21 +0000</pubDate>
      
      <guid>/posts/android-camera-hal3-0/</guid>
      <description>官网文档在此
简单来说，3.0的设计初衷就是 &amp;ndash; 提供per-frame操作的灵活性。
更多细节在官网上写的很清楚了，这里就不再赘述。
罗列一些点，跨度比较大，想到哪说到哪。
######Camera 接口 首先接口本身的设计存在缺陷：
例如setPreviewSize和setPreviewFrameRate是无关的。（但其实这很有关系）
对于ISP这种pipeline来说，类比水管，最大出水量是恒定的；所以理论上，单帧size越大，那帧率（fps）也就越低。
所以size和fps是应该有明确的对应关系的。但这个接口把这个关系打破了。
那是否就无法获取这种对应关系了那？
并不是。Camera提供了CameraCharacteristics来获取更具体的信息，但是要麻烦一些；
可以参考cts测试中，getAvailableMinFrameDurationsForFormatChecked的做法；通过StreamConfigurationMap来算出fps和width/height的关系。
######CTS CTS的加强； 5.0以来，camera的CTS测试case从3x项增加到了3xx项。。。通过cts更加困难。 初衷是好的，会改善android目前不容乐观的rom兼容性。 但真相是，这套测试更像是一张考卷，上有政策下有对策的大有人在。
（不断补充ing）</description>
    </item>
    
    <item>
      <title>MonkeyRunner script</title>
      <link>/posts/monkeyrunner-click-script/</link>
      <pubDate>Sun, 05 Apr 2015 10:54:28 +0000</pubDate>
      
      <guid>/posts/monkeyrunner-click-script/</guid>
      <description>[android官方]
经常用来做压力测试的话，脚本必不可少；
带UI挂工程的就算啦（么必要像CTS那么认真嘛，动不动tearDown），简单直接最好～
MonkeyRunner完全符合条件，直接上无限单击的脚本（Python），对照着改改坐标就好使了：
from com.android.monkeyrunner import MonkeyRunner, MonkeyDevice _COUNT = 0 def take_picture(device): global _COUNT _COUNT += 1 note = &amp;quot;%s%d%s&amp;quot; % (&#39;take the &#39;, _COUNT, &#39; times.&#39;) print note device.touch(720, 2300, MonkeyDevice.DOWN_AND_UP) def main(): _device = MonkeyRunner.waitForConnection() print &#39;opening&#39; while True: take_picture(_device) MonkeyRunner.sleep(3.5) main();  脚本跑起来，开个窗口看log，空下来一会就可以记录一下（不然保持目前干活的节奏~ 会很久不更新的~）</description>
    </item>
    
    <item>
      <title>Repo sync failed through ssh</title>
      <link>/posts/repo-sync-failed-through-ssh/</link>
      <pubDate>Wed, 25 Mar 2015 13:48:55 +0000</pubDate>
      
      <guid>/posts/repo-sync-failed-through-ssh/</guid>
      <description>通过ssh远程连接主机后，在git配置的ssh-key需要密码验证时，repo sync很容易失败（因为使用的git服务器未必一样，所以可能会多次验证密码，造成输入不及时即表现为“密码验证失败”）
在~/.bash_profile里面加上下面代码，然后source一下，即可保证每次ssh登录都会要求（通过ssh-add）输入ssh-key的密码来验证并记住：
if [ -z &amp;quot;$SSH_AUTH_SOCK&amp;quot; ] ; then eval `ssh-agent -s` ssh-add fi  解决~</description>
    </item>
    
    <item>
      <title>Switch JDK on mac</title>
      <link>/posts/switch-jdk-on-mac/</link>
      <pubDate>Mon, 23 Mar 2015 12:56:54 +0000</pubDate>
      
      <guid>/posts/switch-jdk-on-mac/</guid>
      <description>要切换回底层开发啦~
android源码编译的话，L以上需要jdk1.7，以下需要jdk1.6（比2.3还低就要求jdk1.5了）
所以如何方便快速的切换jdk就成了一个问题~
Ubuntu上面可以直接用下面的方式来切换JDK：
sudo update-alternatives --config javac  但mac上就要用java_home了，找到了一个不错的脚本：
function setjdk() { if [ $# -ne 0 ]; then removeFromPath &#39;/System/Library/Frameworks/JavaVM.framework/Home/bin&#39; if [ -n &amp;quot;${JAVA_HOME+x}&amp;quot; ]; then removeFromPath $JAVA_HOME fi export JAVA_HOME=`/usr/libexec/java_home -v $@` export PATH=$JAVA_HOME/bin:$PATH fi } function removeFromPath() { export PATH=$(echo $PATH | sed -E -e &amp;quot;s;:$1;;&amp;quot; -e &amp;quot;s;$1:?;;&amp;quot;) }  写到./bash_profile里面，然后直接setjdk 1.x就好了。 非常方便~
感谢贡献~</description>
    </item>
    
    <item>
      <title>Free Windows is coming</title>
      <link>/posts/free-windows-is-coming/</link>
      <pubDate>Wed, 18 Mar 2015 06:26:36 +0000</pubDate>
      
      <guid>/posts/free-windows-is-coming/</guid>
      <description>微软下猛药了。
（贴个QQ的，360也有了）
QQ + 360，本来是依附于windows的下游厂商，这次却逆袭来推上游的windows。不说打不打架（其实。。。已经打起来了），这预期的装机用户量，简直可以覆盖全中国。
更华丽的是：全平台统一，包括台式机、笔记本、智能手机、平板、Xbox主机在内的所有设备，都将统一使用Windows 10，不会再有Windows、Windows Phone的区分。
这带来的影响简直不可估量。。。
首先一定是很多扫盲科普不会用咋办的文章会广为流传
再就是新系统各种小技巧
当然，面对目前被iOS + Android瓜分的移动端市场，老插不进去脚的Windows这次终于有所仰仗了（windows10的全民更新带来的无差别体验，显然会提升windows phone的使用量；BTW，现在还能叫Windows phone么~？）。
同时xbox和windows10的深度整合的结果，就是同款游戏，购买一次即可在两个平台同时玩 &amp;ndash; 没娘的PS咋办啊？
再加上小米要推出Windows版本 &amp;ndash; 病毒式营销~ （尽管google不太会允许这种事情的发生。。。）
windows免费，及全平台统一；造成的影响，很快可以看出端倪了吧~</description>
    </item>
    
    <item>
      <title>观影单</title>
      <link>/movie-list/</link>
      <pubDate>Wed, 11 Mar 2015 06:57:39 +0000</pubDate>
      
      <guid>/movie-list/</guid>
      <description>权当记录下自己看过的电影、动画片、电视剧等，并简单个人评价下（如果还想得起来的话，很多当下觉得确实不错但现在完全想不起来的就算了）
简单分3档：
 值得花时间看 &amp;ndash; A类 有时间就看看 &amp;ndash; B类 有时间睡觉也别看 &amp;ndash; C类  列表如下：
 《疯狂的麦克斯：狂怒之路》 &amp;gt;A类；Where must we go&amp;hellip;We who wander this wasteland in search of our better selves. &amp;ndash;The First History Man
 《超能查派》 &amp;gt;B类；《人工智能》的未来到底是什么？
 《冲锋车》 &amp;gt;A类；无论底裤穿在里面还是外面，超人始终是超人。（配音真的让人呵呵。。。）
 《侏罗纪世界》 &amp;gt;C类；有钱就看看吧。。。斯皮尔伯格不出马就是不行啊。
 《重返20岁》 &amp;gt;A类；很有趣的故事；比《返老还童》来的轻松愉快多了；
 《战狼》 &amp;gt;B类；哎。。。妹纸说还不错。总不好给C吧！
 《速度与激情7》 &amp;gt;A类；结尾那句For Paul；想到更多的，是现在越走越远的小伙伴们；
 《垃圾男孩》（Trash） &amp;gt;A类；贫民窟的3个执着少年
 《匆匆那年》 &amp;gt;B类；初恋-高考-出轨-堕胎-分手 -&amp;gt; 那一如既往的青春主旋律
 《灰姑娘》 &amp;gt;B类；非常尊重原著。看在影后的面子上。可以看看
 《鲁冰花》 &amp;gt;B类；（很老的片子，小学时候学校还组织过一起去看）How to waste a genius.</description>
    </item>
    
    <item>
      <title>Working holiday visa of NewZealand</title>
      <link>/posts/working-holiday-visa-of-newzealand/</link>
      <pubDate>Mon, 09 Mar 2015 12:00:00 +0000</pubDate>
      
      <guid>/posts/working-holiday-visa-of-newzealand/</guid>
      <description>新西兰给国内18-30岁的小伙伴们提供了为期一年的打工旅行签证；
完美间隔年的节奏；
15/16年的网申将于5月19号开始；
有兴趣的请关注官网。
上一个新西兰热心小伙伴Jack的主页，貌似他一直在关注新西兰留学/移民等相关事宜。本文也是在看过他的这篇后，顺便分享一下~
同时附上纪录片（土豆网），记录新西兰打工旅行的他她它：

Youtube链接
用里面的两句话来收尾吧：
 “我只想说，人只活一次，选择自己喜欢的，怎么选都不会错”
“旅行只是一片阿司匹林，不要期待通过一次长途旅行解决生活的问题”
 </description>
    </item>
    
    <item>
      <title>关于Internet的基础</title>
      <link>/posts/about-internet-basis/</link>
      <pubDate>Sat, 07 Mar 2015 10:58:42 +0000</pubDate>
      
      <guid>/posts/about-internet-basis/</guid>
      <description>一直想找时间好好理清楚Internet的基础，例如协议栈、例如http、例如tcp等等，但一直没整理。
原因一个是这确实是自己的短板，知道的不少，但一直没有从上到下的整理过。
再就是互联网协议从底到上，点太多，经常抓瞎，不知从何谈起。
[BTW，本文尝试不用Q&amp;amp;A的方式来展开试试看~]
现在正好离职了，终于空了足够时间来整理一下~
google+wiki的时候，找到了此文（上，下），写的很浅显易懂。推荐~
加上wiki
上面引用的那位哥说了这么句话： &amp;gt;前面说过，以太网数据包只包含MAC地址，并没有IP地址的栏位。那么是否需要修改数据定义，再添加一个栏位呢？
 回答是不需要，我们可以把IP数据包直接放进以太网数据包的&amp;rdquo;数据&amp;rdquo;部分，因此完全不用修改以太网的规格。这就是互联网分层结构的好处：上层的变动完全不涉及下层的结构。
 这句话说得很好，其实不管七层OSI，还是成为实际标准的四层tcp/ip协议栈，关键的就是这样一个层级间的再封装以保持的层级无关（独立）性。
这种无关性，才能保证整个行业，各自轻松愉快的向前发展，而不用过分关心协议外的耦合性。（有种回答“学计算机都会修电脑”这种问题的即视感。。。）
下图（拼图）描述了从主机A到主机B的网络拓扑，可以清晰看到层与层之间的关系，同层级之间的联系，不同层级的数据格式、协议等：
层级之间，以一种简单方式封装实现的层级无关的数据包结构，wiki的原话相当到位：沿着不同的层应用数据的封装递减： （当然，过分简单也就意味着无法兼顾安全。）
想象下你是如何从主机A访问到这里的（类似的例子其实在下有提到）[这里会做很多简化]
 主机A首先用浏览器；输入nobodycare.me，敲回车；（这里忽略浏览器缓存等优化）
 浏览器会先去问dns服务器（一般DHCP会同样告知DNS服务器的IP），请求nobodycare.me的实际IP地址；
 DNS回复实际IP地址X（最初的GFW就是简单的DNS劫持/污染）；
 浏览器（这里跳过子网掩码这一步）通过主机A的端口N（1024-65535的某端口）向地址X的80端口（http）发出请求（request）；
 浏览器发出的请求的数据包（假设是TCP包），最终会如下分包：（TCP-&amp;gt;IP-&amp;gt;Ethernet） （这里说“分包”其实有一些歧义，因为TCP-&amp;gt;IP-&amp;gt;Ethernet的过程是不断加不同层报头的逐级封装递增，只是最后受限于ethernet的长度限制，才需要”分包“）
 请求经过多层路由，到达了地址X的这台主机B（一般称为服务器），再经过合包（Ethernet-&amp;gt;IP-&amp;gt;TCP），得到那个最初浏览器发出的请求；
 服务器开始处理这个请求：nginx转发-&amp;gt;node.js+ghost处理并反馈（response）html数据；
 反馈也一样进行分包（TCP-&amp;gt;IP-&amp;gt;Ethernet）；
 这分包后的反馈同样经过多层路由，返回到主机A并同样合包（Ethernet-&amp;gt;IP-&amp;gt;TCP），然后数据回到端口N；
 浏览器通过端口N收到反馈（html数据），并开始按照html数据进行渲染；
 然后主机A的浏览器就显示了本站；
  再回去看那个网络拓扑（如Application层：浏览器 -&amp;gt; node.js），就更加清晰明了了。
上面这个例子也简单描述了request/response模型
顺便提一下，http协议是无状态协议，服务器甚至都不知道两次http请求是不是相互有关联，这其实并不适合大部分的业务逻辑，这时候就需要一种方式来“记录（保持）”状态 &amp;ndash; Cookies和Session。  &amp;gt;客户端与服务器进行动态交互的Web应用程序出现之后，HTTP无状态的特性严重阻碍了这些应用程序的实现，毕竟交互是需要承前启后的，简单的购物车程序也要知道用户到底在之前选择了什么商品。于是，两种用于保持HTTP连接状态的技术就应运而生了，一个是Cookie，而另一个则是Session。HTTP本身是一个无状态的连接协议，为了支持客户端与服务器之间的交互，我们就需要通过不同的技术为交互存储状态，而这些不同的技术就是Cookie和Session了。
正是基于这一整套简单又很聪明的设计，构成了整个internet的基础。
简单又干活。（码农毕生追求了吧~）
在wiki里同时看到这么一段有趣的历史（这才让我想起来确实曾有一些高昂的专用网络）：
在长期的发展过程中，IP逐渐取代其他网络。这里是一个简单的解释。IP传输通用数据。数据能够用于任何目的，并且能够很轻易地取代以前由专有数据网络传输的数据。下面是一个普通的过程：
 一个专有的网络开发出来用于特定目的。如果它工作很好，用户将接受它。 为了便利提供IP服务，经常用于访问电子邮件或者聊天，通常以某种方式通过专有网络隧道实现。隧道方式最初可能非常没有效率，因为电子邮件和聊天只需要很低的带宽。 通过一点点的投资IP基础设施逐渐在专有数据网络周边出现。 用IP取代专有服务的需求出现，经常是一个用户要求。 IP替代品过程遍布整个因特网，这使IP替代品比最初的专有网络更加有价值（由于网络效应）。 专有网络受到压制。许多用户开始维护使用IP替代品的复制品。 IP包的间接开销很小，少于1%，这样在成本上非常有竞争性。人们开发一种能够将 IP带到专有网络上的大部分用户的不昂贵的传输媒介。 大多数用户为了削减开销，专有网络被取消。  新工作、新生活即将开始，就拿IP取代专属网络这种屌丝气死高富帅的故事来励志吧~</description>
    </item>
    
    <item>
      <title>My ghost upgrade script</title>
      <link>/posts/my-ghost-upgrade-script/</link>
      <pubDate>Fri, 06 Mar 2015 05:09:09 +0000</pubDate>
      
      <guid>/posts/my-ghost-upgrade-script/</guid>
      <description>最后的最后，还是写了一个： 一行命令就升级ghost的脚本（包括：ghost升级、google font cdn优化、首页摘要显示优化、logo优化、首页图片显示优化、prism高亮code、disqus评论）。
ghostUpgrade
io page
####Environment before using:
 Ubuntu 14.04 (or similar) ghost0.5.x npm/nodejs/forever  ####How to use:
 clone to folder-of-code add executable permission to upgrade_ghost.sh and start_ghost.sh like this: chmod a+x folder-of-code/*.sh change folder-of-ghost in start_ghost.sh to actual ghost folder If you need comments (Disqus only), upgrade like this: folder-of-code/upgrade_ghost.sh folder-of-ghost folder-of-code Disqus_forum_shortname, otherwise: folder-of-code/upgrade_ghost.sh folder-of-ghost folder-of-code Waiting&amp;hellip;  LOL~ Enjoy your ghost~
####What&amp;rsquo;s upgrade_ghost.sh doing：</description>
    </item>
    
    <item>
      <title>Ghost代码高亮</title>
      <link>/posts/ghost-highlight-syntax/</link>
      <pubDate>Wed, 04 Mar 2015 03:15:57 +0000</pubDate>
      
      <guid>/posts/ghost-highlight-syntax/</guid>
      <description>Ghost本身的代码高亮是很粗糙的，如下：
//This is code sample int x = 0; int y = 1; x = y++; ...  但是代码至少应该像下面这样才好看啊！
//This is code sample int x = 0; int y = 1; x = y++; ...  翻了翻ghost的论坛，发现了prism，使用可以参考这里
下载css/js的时候可以选择自己需要的高亮语言等。
这样就又需要修改server上用来更新ghost的bash了：
#copy prism js/css to content and use it (to highlight codes) cp ~/prism/prism.js ./content/themes/casper/assets/js/ cp ~/prism/prism.css ./cotent/themes/casper/assets/css/ sed -i &#39;s~&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;{{asset &amp;quot;css/screen.css&amp;quot;}}&amp;quot; /&amp;gt;~&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;{{asset &amp;quot;css/screen.css&amp;quot;}}&amp;quot; /&amp;gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;{{asset &amp;quot;css/prism.</description>
    </item>
    
    <item>
      <title>OSX版QQ显示问题</title>
      <link>/posts/osx-qq-display-error/</link>
      <pubDate>Tue, 03 Mar 2015 06:39:21 +0000</pubDate>
      
      <guid>/posts/osx-qq-display-error/</guid>
      <description>OSX版本的QQ，有一个存在已经的bug：
现象就是QQ名称不显示，且在群列表（包括数量）中不显示。
因为这个QQ号已经破了10位，推测QQ将QQ号码转整型来进行一些优化（如排序），对于大于1,000,000,000的QQ号无法识别，但群里还有一个1xxxxxxxxx的QQ显示正常（所以应该大于这个值），同时考虑到移位运算的效率提升，推测算法的临界值是2^31（2147483648） &amp;ndash; 32位带符号整型的数值上限。
QQ也面临鸟叔逼Youtube升级（播放次数大于21亿xxx次，32位的尴尬）的问题了么~
LOL~</description>
    </item>
    
    <item>
      <title>计算 -- 万物理论</title>
      <link>/posts/computing-a-theory-of-everything/</link>
      <pubDate>Tue, 03 Mar 2015 05:35:47 +0000</pubDate>
      
      <guid>/posts/computing-a-theory-of-everything/</guid>
      <description>TED链接
此人生平在此，更直接的是Mathematica（理工科的同学应该很熟悉）的作者，也被称为是地球上最聪明的人 之一。
演讲从一开始的Wolfram Alpha就惊喜不断（Google“们”做的更多的是“找到”正确答案，而Alpha做的是“算出”正确答案）；到后面得出的“计算”通用理论 &amp;ndash; 通过简单公式的不断“计算”来找到复杂问题的答案（当然包括各种物理理论）。
贴出来，看看别人2010年在干嘛，我又在干嘛。刺激自己一下。 T_T</description>
    </item>
    
    <item>
      <title>将离（我要滚犊子啦）</title>
      <link>/posts/leaving-cm/</link>
      <pubDate>Sat, 28 Feb 2015 07:49:03 +0000</pubDate>
      
      <guid>/posts/leaving-cm/</guid>
      <description>离职提上日程了啊，邮箱已经被关掉了。。。
动作够迅速，确认了下可能是IT部门弄错了时间；考虑到反正要关掉的，也就不用再开了吧 ：）
该交接的东西不多，大部分都文档化了。
直接留了一个索引表，想干什么事情找对应文档，即可。
服务器相关的事情也交接完了，张老师还是很给力的~
剩下来的时间虽然无聊却也弥足珍贵~
回顾这一年，虽然偶尔忙碌，偶尔清闲，但一直工作的轻松愉快~（公司虽小，氛围却相当赞啊！）
这一路走来，感触颇多，实在不知从何说起。流水账般的记录一下吧：
若干新技能get√：
 FFmpeg for Android FFmpeg对音视频的编码/解码 FFmpeg + GpuImage 实现美拍（Android）[待整理] Jenkins部署Ant/Gradle编译环境 本站（aws/nginx/ghost/python）  有爱的小伙伴们：
 张莉：张老师被我忽悠过来结果我跑路子了。。不要怪我~ 哈哈哈~ 敬你是条汉子！ 严隐：严导被我忽悠去滑雪然后果断上瘾。。不要怪我~ 哈哈哈~ 相当NB的全栈码农~ 郑良亮：Lake，leader，脾气很好，版本递交控制的很到位，值得学习！ 樊平：Boss，装备党！ 平乾：同装备党！ 王萌：大逗比！ 杨文杰：不说了，一图毁终生！ 包立：节操粉碎机！ 李波：会秒杀的90后！ 陈龙：大哥太低调！ 曾立：半半！ 乐敏飞：测试姐妹团的头目 程萍：测试姐妹团的小太妹 樊银：测试姐妹团的军火库 张冰洁：测试姐妹团中，被波波拒绝了的妹纸（波波你注孤生！） 黄平平：从测试姐妹团消失很久了。。。 王宝福：多国语言帝！ 郑XX：浙初兄，对，我忘记你叫啥了，但他们叫你快枪手。。。 张玉清：哈哈哈你想清楚再给我说好么~ 陈成：碉堡的优秀新人~ 张静：你的造型那么精致你让妹纸们情何以堪~ 张健：你一定是某VPN的代理商！ 李世珍：你知道每次别人喊Roy的时候我都会抬头么。。。 俞旻康：名字好难打，爆料王 T_T 龚敏慧：啥都会的HR~ 周璐：啥都会的前台~ 王萌说这是他在公司唯一信任的人，所以我觉得她和王萌有故事。 杨小乐：嗓门很大的IOS头目 郑楠：设计头目，但一定很缺钱！因为他居然还兼职牛丼（食其家）服务员~ 朱静凯：你们三个我不熟啊啊啊啊（0）！ 何宝泳：你们三个我不熟啊啊啊啊（1）！ 王璐：你们三个我不熟啊啊啊啊（2）！ 钟久祥：我真的不会教别人滑雪。。。 吴晓军：走得晚来的早！所以为了照顾你，公司就不提供加班费了~ 王文思：双鱼座！麦当劳走起！ 魏伟：你和大哥一样低调~ 胡锡舟：胡小墨！昵称当真名也是醉了。。。隐姓埋名藏这么深还偷偷练功夫一定是有原因的！欠别人钱记得早点还哦！ 蔡良建：你就是China Joy，就是那不一样的花火~  依然记得你们滑雪的英姿~</description>
    </item>
    
    <item>
      <title>《囚徒健身》</title>
      <link>/qiu-tu-jian-shen/</link>
      <pubDate>Sat, 28 Feb 2015 06:54:00 +0000</pubDate>
      
      <guid>/qiu-tu-jian-shen/</guid>
      <description>简单记录，方便自己练习（带本书确实太重了）
如有版权疑问，请联系；确认后即刻删除。
###俯卧撑 ###深蹲 ###引体向上 ###举腿 ###桥 ###倒立撑 </description>
    </item>
    
    <item>
      <title>God&#39;s in his heaven - All&#39;s right with the world!</title>
      <link>/posts/gods-in-his-heaven-alls-right-with-the-world/</link>
      <pubDate>Fri, 20 Feb 2015 10:29:36 +0000</pubDate>
      
      <guid>/posts/gods-in-his-heaven-alls-right-with-the-world/</guid>
      <description>本文为洗地。
本来没听过这句话，直到《EVA》；NERV总部的slogan；
然后有Fan就直接翻译成了：神不为者，人为之；（天地不仁，视万物为刍狗）
我觉得翻译的蛮好的（在我知道这句话的来历之前）。
结果好巧不巧，发现有人说翻译不对，说原文是：
 The year’s at the spring,
And day’s at the morn;
Morning’s at seven;
The hill-side’s dew-pearled;
The lark’s on the wing;
The snail’s on the thorn;
God’s in His heaven—
All’s right with the world!
 原文很欢快清新的基调，所以那么翻译不对，应该如下翻译：
 一年适逢春,
一日正当晨，
朝钟鸣七响，
山山露珠润，
云雀在翱翔，
蜗牛荆条躺，
上帝天堂居——
万象皆调畅！
 但其实原作者，甚至原全文，从wiki上来看，并不是单纯的欢快清新那么简单。
 The work caused some controversy when it was first published, due to the matter-of-fact portrayals of many of the area&amp;rsquo;s more disreputable characters – notably the adulterous Ottima – and for its frankness on sexual matters.</description>
    </item>
    
    <item>
      <title>GTA5</title>
      <link>/posts/gta5/</link>
      <pubDate>Fri, 20 Feb 2015 09:17:39 +0000</pubDate>
      
      <guid>/posts/gta5/</guid>
      <description>趁过年有时间，玩通了《GTA5》
确实是一款很棒的游戏，可玩性极高。
可以抢车/飙车/改装车；（Need For Speed）
可以射杀平民/警察/军人；（CS）
可以抢飞机/开飞机；（模拟飞行）
可以打架；（连招）
可以翻墙；（跑酷）
可以开船/开战斗机/骑摩托/骑自行车/游泳；（现实世界）
可以看脱衣舞；（嘿嘿嘿）
可以嫖妓；（哈哈哈）
可以看电视；（对，电视节目很搞笑~）
可以买衣服买枪买酒吧买影院买别墅等等；（买买买！）
可以炒股；（怪不得有人有钱买1.5亿的高尔夫球场。。。）
等等不一而足。
如果说任务的设计及实际可行性让人叹为观止；那么灵活性就彻底解放了玩家的思路；
同样是刺杀，可以远距离一枪狙杀，也可以近战火并到底；
同样是偷警车，可以翻墙悄悄偷走，也可以端上枪和警察们狠狠干一场；
同样是做任务，居然还有两种方案可选，甚至还可以选择同往的小伙伴（如果选择的小伙伴不给力，跑路的时候挂掉了，到最后的安家费要比正常分赃还要高哦！）；
三个角色
老T，住在北部的沙漠中，9年前抢银行案唯一成功跑路的狠角色；老妈是脱衣舞女，童年凄凉所以成年要让别人凄凉；干别人妹纸，抢别人钱，单杀后就灭团，偷国家秘密武器（还要卖给chinese）。。。用流氓用来形容他简直是侮辱他的身份！
小F，住在南部的贫民区，健壮的黑人小伙，初生牛犊不怕虎，敢对老T说F word！讲道义，为了钱做事，也不全为了钱做事。决定了T和M的生死。（BTW我上面选择了C~）
M，住在西部的富人别墅区，9年前的抢银行案，FIB（FBI被黑出翔）的污点证人，为FIB内部的腐败探员擦了多年屁股；生活虽富足，但老婆被网球教练和瑜伽教练搞，女儿被选秀节目主持人搞，儿子被损友搞。。。
三个角色互掐互助，饱满了整个故事线。
值得推荐~ 不过要记住这游戏是17+哦！（特价$39.99，相当划算；联机更有趣~）
最后，谢谢这个游戏，以及那些难忘的沙漠风光、淡淡夕阳、蓝天白云、阳光沙滩、漫天星辰、月朗星稀、阴雨绵绵、城市霓虹、灯红酒绿。。。
（我想我已经开始期待虚拟现实的未来了）</description>
    </item>
    
    <item>
      <title>大年三十</title>
      <link>/posts/last-day-of-year/</link>
      <pubDate>Wed, 18 Feb 2015 06:55:12 +0000</pubDate>
      
      <guid>/posts/last-day-of-year/</guid>
      <description>过了今天，就是羊年了。
发小建了微信群（之前的QQ群似乎好久没动静了，这是桌面IM的没落表象么？不好意思偏题了）
吵吵嚷嚷的在谈论新年聚会，谁谁谁嫁哪里去了，谁谁谁开车也要接回来聚，云云。
突然觉得这么不合群似乎不太好啊。随便找了个理由说实在回不去啊，就再也没在群里说话。
不过听着熟悉略多沙哑的声音，心里多少还是会纠结一下。
“家里”似乎一切都好。
老人那边好几年没见了，只听说依然健朗。
本应给他们拜个年，想了很久，还是没拿起电话。
既然在经历这样非主流的生活，那何必还遵循那些主流的繁琐。
该担心的，光担心也无用；不该担心的，又何必浪费时间。
最后的结果就是：不如强大自己。
新的一年，就利用这个长假开始第一次充电吧。
BTW，年夜饭就KFC的新年来一（益）桶，就这么愉快的决定了！
这个时候开始单曲循环《漫步人生路》真的好么？</description>
    </item>
    
    <item>
      <title>美亚速度</title>
      <link>/posts/amazon-speed/</link>
      <pubDate>Thu, 12 Feb 2015 10:08:36 +0000</pubDate>
      
      <guid>/posts/amazon-speed/</guid>
      <description>马上过年了，但是还差一些东西木有买（14号嘛大家都懂的~）
国内又太贵或者没货了。
狠狠心直接美亚直邮，而且加运费来加速；
号称是12号就可以到（我6号下单，7号和8号是周末），但是想想天朝海关那效率，晚个一两天也能接受吧；
结果。。。
相当粗暴的速度。。。
美亚你赢了。</description>
    </item>
    
    <item>
      <title>Android library loading limitation</title>
      <link>/posts/android-library-loading-limitation/</link>
      <pubDate>Thu, 12 Feb 2015 04:27:27 +0000</pubDate>
      
      <guid>/posts/android-library-loading-limitation/</guid>
      <description>Android上想调用native算法库（so的形式），只能走JNI的路（用NDK来编译）；
加载so的时候一般是用System.loadLibrary或System.load；
使用前者，则so只能提前push到系统目录或app对应目录下（不然找不到）；
使用后者，一般情况下无路径的特别限制；这样便于控制app size（so可以单独下载到特定目录）；
但是自从某个os版本后（确实不知道哪个版本后），sdcard卡上的so，也有了加载的限制。
例如报错：Android load library error — failed to map segment
该问题其实算是设备相关，某些内置卡的设备就不存在该问题；也正如stackoverflow上的回答，是权限问题；
出现该问题的设备：
正常的设备：
可以明显看到权限差异。
把so目录改到context.getPackageManager().getApplicationInfo(context.getPackageName(), 0).dataDir后，就OK了。
记录一下，小坑怡情。</description>
    </item>
    
    <item>
      <title>新年目标</title>
      <link>/posts/2015-birthday/</link>
      <pubDate>Wed, 11 Feb 2015 12:33:00 +0000</pubDate>
      
      <guid>/posts/2015-birthday/</guid>
      <description>每年都会想，是不是要写写新年目标；
然后每年都矫情一下~
自那年家里出了事以后，也算是空了很久了；
今年是不是要例外一下？
直接上目标，痛快点：
 丢掉的HAL及kernel，要重新拾起来了；
 MBP既然买了，要好好用熟练起来；
 继续滑雪；貌似还方便了那；
 去趟日本；
 加强自己的web技能点；
 加强自己的算法技能点；
  不分工作，不分生活，兴趣所在，哪里不会点哪里~</description>
    </item>
    
    <item>
      <title>APK Expansion limitation</title>
      <link>/posts/apk-expansion-limitation/</link>
      <pubDate>Wed, 11 Feb 2015 07:17:39 +0000</pubDate>
      
      <guid>/posts/apk-expansion-limitation/</guid>
      <description>APK Expansion
公司的App打算shrink app size &amp;ndash;&amp;gt; 因为有用户抱怨说app太大了看起来就觉得浪费资源bulabulabula。。。
其中APK Expansion也被列为了备选方案；翻了文档和Sample源码后确认了APK Expansion的一些限制：
 超过50M的apk强制要求使用，不超过也可以使用； 可以使用任何格式作为expansion file，但只能有一个main，一个patch（即最多两个，各不超过2G） expansion的size算在app中；如160M的游戏，apk只有20M，但下载后app info看到的size依然是160M； expansion在一般情况下(on most devices)会随apk一起下载；在某些不能下载的设备上，可以手动下载；无法由app来选择，是否随apk一起下载； 需额外增加权限：com.android.vending.CHECK_LICENSE（google play） 和 android.permission.WAKE_LOCK（保证下载时cpu alive）  从app的角度来看，几乎没有好处。app size没有减少、下载的时候也是一起下载（没有lazy机制）、还需要额外权限。。
所以这条方案基本可以pass了。
另外的方案就是把可以shrink的资源，放在自己的服务器（或cdn）上，然后下载后再load；灵活性高很多，问题就是不确定服务器（或cdn）是否在犄角旮旯的地方都靠谱了。（分包apk的方案之前有提到）
记录一下。</description>
    </item>
    
    <item>
      <title>zsh &#43; oh-my-zsh &gt; default shell</title>
      <link>/posts/zsh-oh-my-zsh/</link>
      <pubDate>Tue, 10 Feb 2015 07:12:29 +0000</pubDate>
      
      <guid>/posts/zsh-oh-my-zsh/</guid>
      <description>尽管换上了MBP，terminal的使用还是不少的。。。
而且相比较ubuntu的terminal，osx默认的shell。。。配色太“单调”，提示也很弱。
所以找到了zsh + oh-my-zsh
安装配置文档都有。
可以自己make install zsh再手动配置oh-my-zsh；
或者直接curl -L http://install.ohmyz.sh | sh
plugin设置好自己常用的（例如adb、git、go、osx、python等等）；
然后选择一个喜欢的配色主题，就这么愉快的开工吧：</description>
    </item>
    
    <item>
      <title>不同OS个人体验</title>
      <link>/posts/different-os/</link>
      <pubDate>Mon, 09 Feb 2015 10:37:17 +0000</pubDate>
      
      <guid>/posts/different-os/</guid>
      <description>T410升级到MBPR了。
windows用了很多年。
ubuntu断断续续用了几年。
osx用了几天。
来简单说说个人体验。
####Windows：
几乎没有做不了的事情。
95-&amp;gt;98-&amp;gt;2000-&amp;gt;XP-&amp;gt;7-&amp;gt;8.1 （没用过的就不罗列了）
在边边角角的地方都照顾的很到位 &amp;ndash; 例如各类游戏，各种小工具（对讲机写频之类啊，手机破解啊等等），第一个带UI的版本基本都是windows的。
问题也不少，被说的很不安全，各种杀毒软件满天飞。
经常被说不靠谱。
但又很难离得开。
作为开发者，windows就是万金油的存在。万金油的好就是啥都能干；不好就是，经常差那么一点点。
第一次拿到T410，当天我重装了2次系统，主要目的是重新分区，以及从专业版升级到旗舰版。
顺便说，Bitlocker很强大。
####Ubuntu：
断断续续用过，最近半年才开始当主力系统(14.10)使用。
遇到了不少问题，和Windows的不同在于，有些可以解决，有些解决不了。。。
系统流畅性上还是可以的，但稳定性要比windows差。
个人觉得workspace的切换方式，用起来很方便。
但！是！这玩意儿经常有bug，如：
Chrome浏览器必须在第一个workspace，不然会卡死；
对话框弹起是在当前workspace而非调起这个对话框的那个workspace；
这里仅拿这一个例子来说明不稳定吧。。。
说多了都是泪。
个人觉得最大的好处，应该和android的契合。Terminal用起来要比windows的command舒服多了。
拿老的T410开刀，也是安装了两次，第一次安装后发现全盘加密在安装系统后再加有点麻烦，干脆重装直接上。
软件的话，主流的都有。但都不会那么好用（像Android studio这种IDE不在此列，ubuntu上也是很好用的~）。QQ这种还是windows的最好用。所以我用virtualbox安装了虚拟机，啥都不干就跑QQ和evernote（对，这货没有ubuntu版本，web版还有笔记重复或分享消失的bug。。。）
不少功能，关键时刻容易掉链子，例如分屏显示 T_T 。。。
安全，大家都说很安全（其实只是用的人不多，黑客兴趣不大罢了）
####OSX
最酷的触摸板。
最清晰的屏幕。
最蹩脚的快捷键。。。（我猜我是键位不习惯。）
这才用没多久，也不好说到底有啥好有啥坏，但是。。。
刚拿到mbp（为了避免问题普遍化：型号XC2，目前的15寸顶配）的第一天，被要求系统更新，更新到一半，推荐我全盘加密（FileVault）；我觉得这蛮好啊，就同意了；结果加密到一半，系统的另外一个更新，直接reboot系统了。。。
我想这OSX太NB了，全盘加密到一半还能继续啊？重启后发现，果然，不能继续。。。（可自行搜索filevault stuck on encryption，看看大家的怨念）
不能继续就算了，我一边担心会不会硬盘以后用起来不太正常，一边尝试继续加密，结果键盘不能用了（触摸板还可以用）。。。只能重启。。。
以后每次尝试继续加密，都会导致键盘完全不能用。（硬件Hang住了吧 T_T）
这是第一个OS，让我，被迫全盘格式化来重装系统。。。
另外优胜美地经常花屏的问题我就不说了。。。目前升级到10.10.2，好了很多。
BTW不能忽略它的一大优势，就是基于unix，所以terminal也很好用~ 哈哈哈~
至于安全嘛，引用《浪潮之巅》里面一段话，也许有失偏颇，但确实符合客观规律：
 几天前我和圣地亚哥加州大学一位研究计算机安全的教授讨论信息安全的问题。我们在谈到以往的基于 Unix 内核的操作系统，比如苹果的OS，通常比微软的安全时，他向我介绍说，新的微软操作系统 Vista 现在已经比苹果的操作系统和 Linux 安全得多（我多少有点惊讶）。但是，微软的 Vista 仍然比苹果的操作系统容易受到攻击，因为后者的数量（或者说市场占有率）太小，以至于制造计算机病毒和间谍软件（ Spyware ）的人“懒得”去攻击苹果的计算机。这对苹果公司和苹果的用户是一条悲哀的好消息，它说明微软在操作系统上的统治地位多么强，就连造毒者都必须造微软的毒。
 最后的最后，反正我已经打算把mbp作为主力机了，所以就慢慢适应吧。总会越来越好用的吧~
也会慢慢开始ios的开发~
有趣的东西那么多，不尝试多遗憾啊~</description>
    </item>
    
    <item>
      <title>Photo gallery from folder</title>
      <link>/posts/photo-gallery-from-folder/</link>
      <pubDate>Mon, 09 Feb 2015 07:26:01 +0000</pubDate>
      
      <guid>/posts/photo-gallery-from-folder/</guid>
      <description>当有大量图片需要快速分享出去的时候（例如出去玩，拍了大量照片，分享就变成了大麻烦；如果可以有一个简单的server（或其他机制）来快速分享，那就好多了）
目前搬砖的公司就遇到这个情况，年会有照片，但是因为共享机制的差异（mac访问windows共享），导致公司有不少同学无法拿到照片。
工作机之前搭过amp的环境，所以为了省时省力，就去搜了php gallery from folder
Google前两位分别是UberGallery和FolioGallery
都蛮不错。我选择了后者（因为后者天生支持multi-directory listing！）
搭建起来很容易：
 下载并解压缩放到web目录下 图片放到albums目录下 albums目录为www-data增加可写权限（因为需要在子目录下生成thumbnail） 浏览器打开foliogallery.php（点击对应目录生成thumbnail）  这就OK了！简单吧~ 效果如下：
点击会popup一个大图预览；
大图点击可以左右切换图片；
而且自带slideshow；
基本功能都满足了~
可能会遇到的问题就是图片显示不出来（例如我T_T）：
 Requirements：
A server running PHP 5+.
PHP GD library (for automatc thumbnail creation).
jQuery JavaScript library.
 安装一下：
sudo apt-get install php5-gd &amp;amp;&amp;amp; sudo service apache2 restart  Tada~~
BTW，这看起来可以做一个很有趣的小玩意儿啊~
快速上传，然后用类似Gallery的方式分享，然后大家都可以互相编辑，点赞，加评论等~
很有意思~</description>
    </item>
    
    <item>
      <title>Android Studio export Jar</title>
      <link>/posts/android-studio-export-jar/</link>
      <pubDate>Wed, 04 Feb 2015 09:52:35 +0000</pubDate>
      
      <guid>/posts/android-studio-export-jar/</guid>
      <description>纯记录：
Android Studio没提供export jar这种选项，一般做法参考这里
纯代码无assets的话，在编译后的library module目录下：
找到
 build/intermediates/bundles/release/classes.jar
 直接重命名就可以用啦～</description>
    </item>
    
    <item>
      <title>谈谈微信和支付宝</title>
      <link>/posts/about-weixin-and-alipay/</link>
      <pubDate>Thu, 22 Jan 2015 09:27:46 +0000</pubDate>
      
      <guid>/posts/about-weixin-and-alipay/</guid>
      <description>一月初的时候，微信推出了JS SDK，增加了如下接口：
 分享类接口 图像类接口 音频类接口 智能类接口 设备信息类接口 地理位置类接口 界面操作类接口 微信扫一扫接口 微信小店接口 微信卡券接口 微信支付接口  看起来能做的事情不少啊，这让不少移动前端的同学感慨是否要转型html5+js了。。。
我想说这其实完全不是一个新问题。
因为微信很早以前就开始布局了，从他开放sdk那天开始。
微信开放JS SDK，不能算是多大的跨越，只能说是再进一步；即对于公众号/服务号就可以满足需要的应用（主要是生活服务类，例如银行啊，快递啊，吃穿住用啊）来说，不需要火急火燎的开发android/iOS/WP对应的客户端了，只要网页端接口调用和优化到位，依托微信的支持，开发更快（生活服务类的应用普遍有配套网站，现成的JS码农），效果更好（废话啊），而且使用量（专业点是不是该叫“日活”？哈哈哈）很可能会比自己独立开发的app还要高的多。
话说现在才有这个担心的同学们，你们是不是太后知后觉了点？
已经在做html5+js的同学们，你们注意啦，以后竞争压力只会越来越大。
会有人疑问，是不是大一统时代到来了啊？（其实html5刚出来的时候，这种呼声就层出不穷）怎么说那，就是让浏览器搞定所有事，例如浏览器可以看电影，可以听音乐，可以看新闻，可以聊八卦，可以购物，可以分享，可以下载，甚至还可以玩3D游戏&amp;hellip;试问对于一个普通人，一台电脑装一个浏览器不就够了么？
这个疑问，多少会让人想起90年代微软和网景（神马？你不知道这个公司？很正常，哈哈哈）的撕逼大战。结果嘛，很明显，你看现在还多少人知道网景这个公司？
那时候受制于各种因素（硬件对渲染能力的限制，操作系统对权限的限制，网络基础带宽的限制等等），浏览器的capability完全无法满足用户的需要。所以那场撕逼大战的胜利要素就是浏览器单价；对，那时候的浏览器，作为一个app，是需要花钱买的。。。所以微软心一横，直接捆绑在windows里面，送给用户。尽管后来因此被告涉嫌垄断，被巨额罚款并且还要拆分公司，但微软的IE一度达到市占率90%！好吧扯淡到此为止。
继续说，而现在，随着Chrome等一众浏览器的兴起，加上html5（你丫不就加了几个tag么）的推波助澜，大一统说法不仅仅只是停留在讨论的层面，Google甚至还顺势推出了Chrome笔记本（尽管雷声大雨点小）。。。
在我看来，这一切，又仿佛回到了若干年前，那个从Rich Client向Thin Client过渡的时代。其实归根结底，还是要看基础带宽和基础硬件的性能瓶颈。
当基础带宽不够，基础硬件跟不上的时候；那就把脏活累活都扔到带宽够硬件强大的服务器去做吧；当基础带宽和硬件渐渐跟上，自然也可以把一部分工作放回本地（电脑/手机/平板）来处理；随着基础带宽和硬件的不断进化，服务器和本地的差别也就越来越小；是服务器来处理，还是本地来处理，甚至可以采用动态均衡的方式（网游普遍用类似的策略来避免突发延迟带来的卡顿）；Rich client和Thin client这种泾渭分明的标签，已经不适合我们的时代了。
现在，3G/4G已经可以轻松支持高清视频在线播放；Face Time及类似App提供的更直观的通话方式，让传统电信运营商压力倍增；
现在手机/平板的运算速度/内存大小，甚至已经超过了很多人的家用电脑；
曾经，对于一个普通人来说，手机需要同时安装浏览器，QQ，淘宝，京东，支付宝，打车软件，大众点评，各类手机银行等等等等；
现在，手机只要有微信就够了；
随着接口的不断开放，协议/标准的不断完善，云服务对过往常规本地服务的不断优化改进；操作系统/浏览器/App彼此的功能交叉覆盖越来越多，彼此的界限也越来越模糊（现在已经不能简单的说微信只是一个社交软件了吧）。
大一统的赶脚有木有？
有了这些铺垫，再回过头来，说说微信和支付宝在做的事情。
微信和支付宝，两者出发点不同，但都在尽全力扩大自己的入口优势并提高用户粘性。
不说枯燥的功能点，这里举个生活中具体的例子：
下班了，要和朋友去吃饭；
 打开手机某App，点开某美食公众号，它根据我的坐标帮我推荐了旁边一家餐厅，我确认后它还帮我在线排队； 不错，估计走到地方就差不多可以吃了，到地方的途中刷刷朋友圈； 落座，点餐前餐厅服务员说关注他们家的公众号可以打折并享受免费WIFI；关注后发现了一些新菜品，点之； 等上菜的时候朋友分享我一个数码新品，看起来蛮有意思的，下单买之，妥妥的次日达； 吃饭前比个剪刀手拍个照（真是恶俗啊。。）上传朋友圈； 吃完饭结账，服务员说手机付款还有额外折扣，便宜了很多； 出了餐厅，用手机打车各回各家，打车还有红包可以用；  如何，一台手机一个应用，手指抖抖就搞定所有生活细节，是不是很方便？这其实就是目前一线城市（非地域党，但一线城市对移动互联网的推广和完善力度毋庸置疑）很多年轻人的生活方式；很多二三线城市也在被快速接受的生活方式。
现在很多人用微信来做1/2/3/4/5/7；用支付宝来做6/7；而实际上，目前最新版本的微信和支付宝，都可以基本实现上述所有功能。（微信和支付宝的差异这里就不展开了，都在用的东西谁都能说出个一二来）
微信对JS SDK的放开，就是在进一步加强对支付环节的控制。
而支付宝新版本的功能强化，就是对公众号/朋友圈功能的补全。
撕逼大战再次展开（我看好微信哦）～
所谓的大一统，也许浏览器尚未完成的事情，要交给带有支付属性的社交软件来完成了。
想象一下，一个普通的饭店，不需要自己购买POS机（也许一个二维码就够了），不需要自己去铺设高速WIFI，不需要请码农不需要请美工，不需要租借服务器，只要付出也许一周甚至几天的流水（作为年费），就可以跻身移动互联网的浪潮中，可以在线订外卖，在线排队，在线点餐，全店覆盖免费WIFI，在线支付，在线获取吃客反馈；可以鼠标点点就将新菜新优惠等通知到本店拥趸吃货手中；而互联网的及时效应，会以良性循环的方式不断推动这家饭店，保证新鲜食材，保证质量，提高服务态度等等（小心差评哦）。
而这种生活，这种方式，这种正向推动，才是未来；才是互联网，应该做的。
有木有发现一件事情；
入口的变化：桌面端操作系统 -&amp;gt; 桌面端浏览器 -&amp;gt; 移动端操作系统 -&amp;gt; 微信/支付宝；
而码农们需要做的事情：跨平台(Windows/Linux) -&amp;gt; 跨浏览器（IE6，哈哈哈） -&amp;gt; 跨平台（Android/IOS/WP） -&amp;gt; 跨App（微信接口和支付宝接口）；</description>
    </item>
    
    <item>
      <title>Ghost修改screen.css的脚本</title>
      <link>/posts/script-to-modify-ghost-screen-css/</link>
      <pubDate>Wed, 21 Jan 2015 12:07:06 +0000</pubDate>
      
      <guid>/posts/script-to-modify-ghost-screen-css/</guid>
      <description>Ghost更新越来越频繁，每次都要手动更新css实在伤不起。。。
反正改动的地方也不多，干脆做成一键脚本好了，把之前upgrade的脚本再扩展一下：
首先更改#7，改动如下，增加了change logo position：
#change post page what to show... echo &#39;7. replace &amp;quot;excerpt&amp;quot; with &amp;quot;content&amp;quot; ---------------&#39; #excerpt -&amp;gt; content #read more -&amp;gt; &amp;gt;&amp;gt; sed -i &amp;quot;s#&amp;lt;p&amp;gt;{{excerpt words=\&amp;quot;26\&amp;quot;}} &amp;lt;a class=\&amp;quot;read-more\&amp;quot; href=\&amp;quot;{{url}}\&amp;quot;&amp;gt;&amp;amp;raquo;#&amp;lt;p&amp;gt;{{content words=\&amp;quot;32\&amp;quot;}} &amp;lt;a class=\&amp;quot;read-more\&amp;quot; href=\&amp;quot;{{url}}\&amp;quot;&amp;gt;\&amp;amp;raquo;\&amp;amp;raquo;#g&amp;quot; ./content/themes/casper/partials/loop.hbs #change logo position sed -i &#39;s~{{#if @blog.logo}}&amp;lt;a class=&amp;quot;blog-logo&amp;quot; href=&amp;quot;{{@blog.url}}&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;{{@blog.logo}}&amp;quot; alt=&amp;quot;Blog Logo&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt;{{/if}}~~g&#39; ./content/themes/casper/index.hbs sed -i &#39;s~&amp;lt;h1 class=&amp;quot;page-title&amp;quot;&amp;gt;{{@blog.title}}&amp;lt;/h1&amp;gt;~{{#if @blog.logo}}&amp;lt;a class=&amp;quot;blog-logo&amp;quot; href=&amp;quot;{{@blog.url}}/about&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;{{@blog.logo}}&amp;quot; alt=&amp;quot;Blog Logo&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt;{{/if}}&amp;lt;h1 class=&amp;quot;page-title&amp;quot;&amp;gt;{{@blog.title}}&amp;lt;/h1&amp;gt;~g&#39; ./content/themes/casper/index.hbs  再就是考虑到自己智商太低，难以驾驭sed的多行匹配，所以祭出Python；脚本中加上这句：
#call python to do multiple lines replacement python ~/ghost_css_adjustment.</description>
    </item>
    
    <item>
      <title>Android ImageFetcher</title>
      <link>/posts/android-imagefetcher/</link>
      <pubDate>Wed, 21 Jan 2015 06:15:21 +0000</pubDate>
      
      <guid>/posts/android-imagefetcher/</guid>
      <description>Google完善文档后，也提供了一大批优秀的源代码。
ImageFetcher就是其中之一，这货非常简洁的实现了用ImageView来异步加载网页图片，同时对图片进行二级缓存的功能。
稍微改改就可以轻松适配任何图片资源（例如本地，例如需特殊条件（如宽高，比例，透明度等）等）了。
主体代码构成： 外部调用如下：
 New：
ImageFetcher imageFetcher = new ImageFetcher(context, width, height);  就可以了。
当然这里一般都会改动；
例如为了区分cache目录，会把unique folder name作为参数传入进去）。
例如为了替换默认图，把图标传进去。
例如为了适配任何图片资源，增加自定义的ImageProvider，也在初始化的时候传进去。
 Load bitmap：   imageFetcher.loadImage(pathString, (ImageView) view.findViewById(R.id.thumbnail));   这样这个ImageView就会在图片通过异步下载好（并缓存）以后，自己加载显示出来了～
 Close cache：  imageFetcher.setPauseWork(false); imageFetcher.closeCache();  就是这么简单任性～
内部逻辑重点的几个：
 对Download下来的图片，使用DiskLruCache来本地缓存，使用LruCache作为内存缓存；
 使用AsyncTask（WeakReference）来异步download图片；结束后对ImageView（WeakReference）进行setImageDrawable（AsyncDrawable）；这里的AsyncDrawable内部有正在处理自身的AsyncTask的WeakReference，所以可以避免重复execute的情况；每次都会先cancel之前的。
 AsyncTask跑在Executor（线程池）中。
  主要原理就是这样，其中一些细节可以自己翻源码～～ 非常方便使用和扩展～ 基本已经成为搭项目时必备库之一。
但是这里有一点，需要注意！
谨慎使用ImageFetcher.setPauseWork
官方Sample给出了两个用法，看起来前后有一点矛盾：
一个是在Grid滑动的时候：
public void onScrollStateChanged(AbsListView absListView, int scrollState) { // Pause fetcher to ensure smoother scrolling when flinging if (scrollState == AbsListView.</description>
    </item>
    
    <item>
      <title>EC2 /dev/xvda1 should be checked for errors</title>
      <link>/posts/ec2-devxvda1-should-be-checked-for-errors/</link>
      <pubDate>Tue, 20 Jan 2015 06:54:26 +0000</pubDate>
      
      <guid>/posts/ec2-devxvda1-should-be-checked-for-errors/</guid>
      <description>今天ssh登到EC2，发现报这个问题：
/dev/xvda1 should be checked for errors  短板突显，翻了翻google，比较靠谱的是这个：
Running fsck on EC2
已试，靠谱～
记录一下～</description>
    </item>
    
    <item>
      <title>Proguard混淆</title>
      <link>/posts/proguard-obfuscation/</link>
      <pubDate>Sat, 17 Jan 2015 08:01:38 +0000</pubDate>
      
      <guid>/posts/proguard-obfuscation/</guid>
      <description>这里仅仅说Android的混淆，其他平台基本相同。
不同的IDE有不同的配置方法。
Android Studio的配置略有差异，可以参考前文
混淆的大致原理就是rename class（所以混淆的过程比较慢），混淆的初衷，并不是为了不让人看源码，毕竟java的虚拟机机制就决定了，源码肯定是可以反编译出来的；其主要目的是让反编译后的代码“难以”看懂。
例如打开一个混淆后输出的mapping文件，可以看到：
（某代码片段，请无视。）
这样一来，反编译后的代码里面，基本就是a.b.c(d.e)这种代码（也许原来只是Util.isNetworkAvailable(context)），大大增加了阅读难度；也就达到了防止反编译的目的。
但经常会误伤，因为是rename，所以对name敏感（依赖name）的方法或者库就会无法正常工作。例如反射，例如JNI的接口class（依赖class name来找context object），例如GSON这些常用工具库。
解决办法就是修改proguard的配置文件，将这些敏感class置为例外。
常用方法如下：
 排除指定类A
-keepclassmembers class com.xxx.xxx.A { *; }   将类A的子类全部排除 language-bash -keepclassmembers class * extends com.xxx.xxx.A { *; }   将包P内的class全部排除
-keep public class com.xxx.P.* { *; }   将包P内的class及subclass全部排除 language-bash -keep public class com.xxx.P.** { *; }     注意*和**的差别；
注意最后的{ *; }，用法很多，可以指定仅排除public/protected，如：
{ public protected *;}  当然还可以直接更直接一些：
{ &amp;lt;fields&amp;gt;; &amp;lt;methods&amp;gt;; }  如果是使用Gson的话，还可以直接如下使用方式来避免混淆问题：</description>
    </item>
    
    <item>
      <title>Jenkins&#43;Github&#43;Gradle&#43;Android</title>
      <link>/posts/jenkins-github-gradle-android/</link>
      <pubDate>Thu, 15 Jan 2015 13:17:06 +0000</pubDate>
      
      <guid>/posts/jenkins-github-gradle-android/</guid>
      <description>也许题目换成《配置以Github作为源码仓库并用Gradle编译Android的Jenkins时遇到的坑》更恰当~ LOL~
网上教学贴很多，不一一列举了。也可以参考前一篇（BTW，我想说Subversion Release Plugin比自带的Subversion Plugin好用多了）。本文主要补充配置Github和Gradle容易遇到的问题。
重要的plugin：
 Git plugin
 Gradle plugin
  至于Github plugin之类的插件，自己看着办吧。
这里有几个容易出问题的地方
 如何用Jenkins从Github获取代码：  建议使用Deploy keys
怎么用那？最好用.ssh/config，可以参考这里。
需要注意的是，在创建ssh key的时候，需要
sudo -u jenkins ssh-keygen -t rsa -f .../jenkins/.ssh/id_rsa_project  加-u来指定以jenkins身份创建key，加-f就是为了方便多个ssh key（例如多repository）的时候好管理。
同时，创建出来的ssh key不要设置密码，因为jenkins对ssh key密码的支持不是特别好，会报public key permission错误（非访问权限问题）。BTW，虽然github提到deploy keys缺点时有说，这货一般为了方便不加密码；但通过command方式，用带密码的ssh key去访问github是没问题的。
当然Github还提供了一套更华丽的方式，叫Machine user，简单说就是单独申请一个账户（类似一个代理），把这个账户加到不同的repository里面作为只读的collaborator，再直接在这个账户里面加ssh key（而不用每个repository一个deploy key了），这样通过这一个machine user（代理）就可以访问多个repository了。
最后，这里去clone/pull代码的时候，有时候出报timeout的错误，解决方法有两种，一种是在该目录下，手动git clone &amp;ndash;bare一个repository出来；再一种就是增加timeout时间：源码管理 -&amp;gt; Git -&amp;gt; Additional Behaviours -&amp;gt; Advanced clone behaviours
 如何用Jenkins来run Gradle：  需要手动匹配gradle版本。在系统设置里面新增Gradle安装即可，不然在Invoke Gradle script的时候，除了default就没得选了。
JAVA_HOME和ANDROID_HOME这两个环境变量需要提前设置好（可以在/etc/profile里面export，然后source /etc/profile即可）；修改环境变量后需要重启jenkins；同时注意对应的目录，jenkins是否有访问权限；</description>
    </item>
    
    <item>
      <title>Android SparseArray中indexOfValue返回-1</title>
      <link>/posts/android-sparsearray-indexofvalue-return-negative-1/</link>
      <pubDate>Tue, 13 Jan 2015 12:55:43 +0000</pubDate>
      
      <guid>/posts/android-sparsearray-indexofvalue-return-negative-1/</guid>
      <description>继续Android。
SparseArray&amp;lt;T&amp;gt;是蛮好用的基本类型，一般用来替换掉HashMap&amp;lt;Integer, T&amp;gt;。
有时候偷懒，也会用它来替换Object[]，也就是基本数组。
因为这货有indexOfValue（这样就不用去遍历找索引啦），遍历也比HashMap方便的多。可以满足对基本数组的需要（但性能不高，使用需谨慎，文档有详细解释为什么）。
但是，这玩意儿有个坑，也就在indexOfValue里面。
当用它来存储String时，可能会出现明明Value已经put进去了，但是indexOfValue就是返回-1的情况。
一开始还以为可能是线程安全相关的问题，还打算加锁来着。结果。。。
原因在于：
 Note also that unlike most collections&amp;rsquo; indexOf methods, this method compares values using == rather than equals.
 源码如下：
public int indexOfValue(E value) { if (mGarbage) { gc(); } for (int i = 0; i &amp;lt; mSize; i++) if (mValues[i] == value) return i; return -1; }  T_T
Java中，字符串比较用==和equals的区别就不用解释了吧。。。
你说Android你加个方便好用的数据结构你用个equals能咋样。。。又中枪了。。。</description>
    </item>
    
    <item>
      <title>Android RelativeLayout中wrap_content和alignParentBottom的冲突</title>
      <link>/posts/android-conflict-of-relativelayout-between-wrapcontent-and-alignparentbottom/</link>
      <pubDate>Mon, 12 Jan 2015 08:25:33 +0000</pubDate>
      
      <guid>/posts/android-conflict-of-relativelayout-between-wrapcontent-and-alignparentbottom/</guid>
      <description>继续随便记录一下，之前也说过，Android类似的坑不少。
下面又是一例：
RelativeLayout中，为了方便布局，子view经常会用到alignParentBottom/Top/Left/Right等，如：
android:layout_alignParentBottom=&amp;quot;true&amp;quot;  但这时候需要注意的是，如果parent是wrap_content的话，alignParentRight就意味着要求parent的layout_width=&amp;quot;match_parent&amp;quot;； alignParentBottom就意味着要求parent的layout_height=&amp;quot;match_parent&amp;quot;
这会带来什么问题那？两个问题：
 显示错误。在布局嵌套的环境下，例如布局A包含B和C，在A里面，B above C：（伪布局代码）  RelativeLayout width=match_parent height=match_parent id=&amp;quot;A&amp;quot; XXLayout width=match_parent height=wrap_content above=&amp;quot;C&amp;quot; id=&amp;quot;B&amp;quot; RelativeLayout width=match_parent height=wrap_content id=&amp;quot;C&amp;quot; XXView width=match_parent height=wrap_content android:layout_alignParentBottom=&amp;quot;true&amp;quot; src=xxx  本意是希望在布局A里面，B可以在C上面显示，C里面显示xxx；
但是结果是：C会撑满A，然后导致B不可见。
改法很简单，去掉 language-bash android:layout_alignParentBottom=&amp;quot;true&amp;quot; 即可。
实际原因我没有去翻源码，不确定；但是猜测和Android的绘制/计算布局的方向有关，Android默认是从屏幕左上角向右下角绘制（在写自定义view，重载onDraw，或者坐标计算的时候需要依赖这种“特性”），所以在这种情况下，alignBottom或alignRight后，“画布”就自然而然被顶到下边和右边去了。
 性能。对，就是性能；撑满屏幕意味着这个view（例如上面的C）的刷新，不只是局部刷新，而是整屏刷新（即使XXView可能只是一个bottom bar这种非全屏的view），所以不管是耗电量还是性能，都会受到一定的影响。  综上，在设计layout的时候，需要注意方向带来的影响，同时注意不同属性之间可能导致的“冲突”。
记录一下。</description>
    </item>
    
    <item>
      <title>Android LinearLayout动态增加item时Weight的设置</title>
      <link>/posts/android-linear-layout-weight-setting-when-adding-child-dynamically/</link>
      <pubDate>Fri, 09 Jan 2015 04:50:13 +0000</pubDate>
      
      <guid>/posts/android-linear-layout-weight-setting-when-adding-child-dynamically/</guid>
      <description>Andorid上，LinearLayout动态增加child item时，一般如下：
addView(child)  即可。
child item可以从xml中直接inflate出来。
这里有个问题是，动态增加的话，child item中的weight，在add到LinearLayout后无效（用LinearLayout，很多时候就是冲着weight去的，因为可以很容易做到对齐和分割）。
唯一的办法是在addView的时候用新的LayoutParams来指定weight：
addView(child, new LinearLayout.LayoutParams(0, ViewGroup.LayoutParams.MATCH_PARENT, 1));  最好设置一下weightSum：
setWeightSum(childCount);  Android的layout配置中，类似的坑数不尽。。。再加上不同OS版本的不同表现，简直了T_T。。
记录一下。</description>
    </item>
    
    <item>
      <title>Ghost开机启动</title>
      <link>/posts/ghost-boot-up/</link>
      <pubDate>Thu, 08 Jan 2015 02:30:07 +0000</pubDate>
      
      <guid>/posts/ghost-boot-up/</guid>
      <description>Ghost本身是基于node.js的，这意味着 &amp;ndash; 常驻后台需要用到其他方式，例如&amp;amp;或者forever（官网建议）
但这样也需要使用类似sudo start_ghost.sh这种方式来启动，想开机启动的话还是需要使用update-rc.d或者cron
前者官网提供了一个说明，相当于自己写一个service
后者比较强大，用在这里有点大材小用。
简单点的做法就直接参考stackoverflow
sudo mv /filename /etc/init.d/ sudo chmod +x /etc/init.d/filename sudo update-rc.d filename defaults   Script should now start on boot. Note that this method also works with both hard links and symbolic links (ln).
Edit
At this point in the boot process PATH isn&amp;rsquo;t set yet, so it is critical that absolute paths are used throughout. BUT, as pointed out in the comments by Steve HHH, explicitly declaring the full file path (/etc/init.</description>
    </item>
    
    <item>
      <title>Ghost首页图片限制宽高</title>
      <link>/posts/ghost-limit-image-width/</link>
      <pubDate>Tue, 06 Jan 2015 03:26:26 +0000</pubDate>
      
      <guid>/posts/ghost-limit-image-width/</guid>
      <description>还是默认Theme。
如何显示图片可以参考[Ghost在首页显示图片而非摘要]
但是这样修改有一个地方漏掉了。就是图片的宽高，普通图片还好，但到了大图，就坑爹了。在首页显示比较大的图片，会直接撑破侧边。。。
本来以为Ghost应该支持类似![](xxx.jpg =500x)（以500 x auto的宽高来显示xxx.jpg）这种语法，结果不支持。。。
搜一搜，可以发现Ghost讨论组对于支持image的复杂操作（例如resize，旋转等）的呼声还是很高的，而且专门列了一贴来讨论，并且给出了若干可能的解决方案（都有各自的优缺点）。
这里先不考虑多size来适配的case，这交给Ghost的大神们吧～
我只是希望首页显示图片后，图片宽高可控。
解决方法有两种：
一种是直接把./partials/loop.hbs里，post-excerpt项的class直接修改为post-content～
&amp;lt;section class=&amp;quot;post-content&amp;quot;&amp;gt; ... &amp;lt;/section&amp;gt;  这样的好处是方便，坏处（我觉得蛮好的）就是首页的文字风格和page页完全一样（例如字体大小，行间距等），没区别了。
还有一种就是增加post-excerpt img的css，直接copy post-content img然后改一下名字即可：
/* Keep images centred and within the bounds of the post-width */ .post-excerpt img { display: block; max-width: 100%; height: auto; margin: 0 auto; padding: 0.6em 0; }  好处是首页风格保持和之前一致，坏处嘛，稍微麻烦一点点。哈哈～
暂时先这么处理吧（BTW，我选择的是后者）。
按照Ghost的说法，Image Process已经放入Road map，坐等版本更新吧～</description>
    </item>
    
    <item>
      <title>新年</title>
      <link>/posts/new-year/</link>
      <pubDate>Mon, 05 Jan 2015 10:18:32 +0000</pubDate>
      
      <guid>/posts/new-year/</guid>
      <description>新年第一篇，随便扯扯，奠定全年基调吧。
不过现在才提新年貌似有点晚了哈～
31号的小Party，各种欢乐：
元旦3天假，也没很好的计划，加上X项目缺少给力的UI支持，拖延至今。
1号啥都没做，玩了一天的《Titan Fall》，称不上神作，但确实够炫酷！ BTW，浪费了一个好天气：
2号去爬山，杭州的北高峰，和4个女生一起（3个同事，1个家属），事实证明了三个女人一台戏 &amp;mdash; 和女生出游，一定不能听她们的啊啊啊！
一个百八十米的北高峰爬了2个小时。。。然后又用2个小时等吃饭（绿茶总店）。。。最后再两小时各回各家。。。整个过程曲折离奇，逗比人生果然精彩。
上图：
晃眼就3号了，觉得这一天不能再荒废了，然后去买了很多熟食回来啃。。。也是蛮拼的。
尽管新的一年，开头就发生了很多不幸，例如上海外滩、古迹大火、消防牺牲等等，但还是相信这是先抑后扬的节奏吧。
新的一年，希望可以，确实的做点事情。
就这样。
2015，走起～</description>
    </item>
    
    <item>
      <title>关于字符编码</title>
      <link>/posts/about-charset/</link>
      <pubDate>Wed, 31 Dec 2014 13:10:19 +0000</pubDate>
      
      <guid>/posts/about-charset/</guid>
      <description>以下内容纯个人理解，如有遗漏/错误等我反应过来再补充吧～
（感觉还是用类似Q&amp;amp;A的方式来写写比较好）
######什么是字符？
在计算机里面，无意义的二进制0和1（如果不知道的话，继续看下去也没什么意义了。。。），按照特定的长度可以表示一个数值（例如二进制的1000表示十进制的8）；对于不同的数值，如果有一个table来映射（有没有密码本的赶脚），那不同的数值就可以表示特定的含义 &amp;mdash; 字符。
例如，二进制里面的01000001：
 十进制（也理解成表的话，只是“映射”方式更简单）就是65 在ASCII表里，对应的是英文大写字母A  你看，同一个数值，通过不同的table，就有了不同的含义（小马过河的即视感。。。）。
######什么是字符编码？
很显然，ASCII这个表能表示的含义太少了（只有128个，而且其中还有33个不能显示的字符），尽管用来表示英文（A-Z + a-z + 一些常用符号）是足够了，但你让其他语言怎么看？
所以不同的国家，就有了各自的一张Table；这些Tables，就统称为ANSI编码。所以一般说ANSI编码，不是单指简体中文的GB2312或者日文的JIS，而是指这个合集，指这种“每个国家都不同但又是各自国家标准的编码表”。
######一个国家一张表？
一个国家一张表，听起来不错，但有个问题在于 &amp;mdash;- 这意味着，同一个数值，在不同国家表示的含义就不同了啊啊啊！
例如十六进制的0xD2BB这样两个字节：
 在GB2312中表示大写数字一 在JIS中表示ﾒｻ （不好意思我不知道这是啥意思。。。）  所以这就意味着，同一份文档，在不同国家，可能会出现显示内容完全不同的情况（一般情况下是乱码。。）
尤其是在大互联网浪潮下，这意味着，在本国打开一切OK的网页，在国外打开就是一团浆糊了：
（哈哈，其实本站不是ANSI编码，这里强制使用ANSI的JIS以后～ 就呵呵了～ ）
######乱码怎么办？
怎么办？两种办法：
 一种是找一个标准，大家统一使用，也就是目前渐成主流的Unicode编码； 再一种就是自动转换编码，例如你在大天朝，一般是用GB2312（简体中文）编码，那么如果想看一篇使用JIS编码的文章/网页，就需要你使用的阅读器/浏览器做两件事情：
 自动编码识别 &amp;ndash; 让阅读器/浏览器知道这篇文章/网页是JIS编码的 编码转换 &amp;ndash; 将JIS编码转换成GB2312编码（当然也可以在阅读器/浏览器内部，直接用JIS编码来显示）   ######什么是Unicode？
更具体的请Wiki。
简单来说，就是把不同的语言，按照特定的顺序，不重复的排列下去。组成一个巨大的“字典”（这也意味着这个字典的页数要够大）。
重点就是不重复
具体的可以看这里[Wiki]
有一点需要注意的是，Unicode是统称。
UTF-8/UTF-16/UTF-32等等，都是Unicode。
UTF-8就是为了存储和传输方便，缩小版的UTF-16。
显然的是，它们可以相互转换（不是查表，而是用公式）。
######为什么需要自动编码识别？
因为，很多情况下，目标文档的编码是未知的。
举个例子，这就好像古时候密码破译的场景，同一个密码，用不同的密码本对照破译，有可能会得到完全相反的含义。所以如何正确识别编码，就变得特别重要。
######那文档没有特定“编码识别符”么？
对，没有统一标准（即使是Unicode）。或者说没有“强制”执行的标准，来约定必须在文档某个位置标注当前文档编码类型的。
这也就意味着 &amp;ndash; 自动编码识别必不可少。
######如何自动编码识别？
很多算法，一句话就是“模式识别”。
举个例子，在中文里，一般会有一些出现频率较高的词，如“的、我”等等；不同的语言，常用词也显然是不一样的（当然可能存在特例，中文的“的”和日文的“的”都是高频词且十六进制数值一样（仅举例，显然不一样嘛），但就目前的统计数据而言，大部分高频词都一样的可能性几乎为0），所以算法基本如下：
 读取文档的一段内容（例如前4096字节），当然也可以全部读取 统计这段内容中对不同编码的高频词的命中率 命中率最高者即为“猜”到的编码  就是这么简单。</description>
    </item>
    
    <item>
      <title>同步云服务</title>
      <link>/posts/cloud-sync/</link>
      <pubDate>Fri, 26 Dec 2014 12:34:27 +0000</pubDate>
      
      <guid>/posts/cloud-sync/</guid>
      <description>自用推荐：不用花钱系列
文件同步/云盘服务现在不能算多如牛毛，但也让人目不暇接了。这里尽量客观的评价下我接触或用过的。不评分，仅评价。
 Dropbox：  说实话我用的不多（被墙是原因之一），但是据我所知，Qualcomm内每个员工都有一个绑定的dropbox会员账号（2013年的时候）；一个数据备份/分享云服务，居然可以被一个靠专利生存的大公司信任！从这个角度来说，不管是影响力还是使用量，其他公司都是难以望其项背的。
听说他们年初的时候估值已达100亿，我觉得，值。
优点：无出其右的兼容性（全系统全平台的客户端， WP sorry），专业版的价格也不贵。
缺点：要！翻！墙！
 OneDrive：  我是有免费25G空间的老用户哦（优越感油然而生）～
微软的东西，应该比Dropbox存在的时间还要久（之前是叫SkyDrive），未考证。和微软系统对接的比较好，速度一般（貌似最近也需要翻墙才能用了）。考虑到稳定性等因素，我用这货还是比较多的，至今没出啥问题（云盘也有。。。问题的，下面会提到）。
优点：和自家服务搭配使用很方便，例如OneNote。
缺点：现在也要翻墙了！
 Google Drive：  这个用的就比较少了，原因很简单 &amp;ndash; Goooooooooooogle和大天朝，你懂的。
优点：和微软类似，都是用云盘作为一个基础组件（虚拟硬盘），然后在上面搭配各种服务。最近也支持gmail直接贴Google Drive链接了（这速度确实不像Google的风格）
缺点：请继续翻墙。。。
 微云  企鹅家的东西
优点：速度
缺点：你放心么？举个例子，微云（腾讯），居然赤裸裸的提供了极速秒传功能（必然是*MD5匹配后直接copy一份（也许只是个link）*！简而言之，腾讯对上传的数据做了一次“扫描”）
 百度盘  优点：速度，支持离线下载（直接下载种子/磁力链等）
缺点：离线下载基于和“极速秒传”一样的原理！再就是，这货居然会直接和谐网盘内容！妈蛋！说好的*只复制别剪切那，只扫描不修改那*！？最后，我不会告诉你们百度盘早一些的客户端会上传失败会丢文件的！
 115  雨林木风也蛮拼的。。
优点：速度
缺点：貌似比企鹅还不让人放心，而且动不动要下载浏览器是要闹哪样。
 华为、360、金山  懒得评价这三家了，前两年为了占坑打得火热，现在也偃旗息鼓了。
 BitTorrent Sync  之前找资料的时候翻出来的一个工具（这真是一个巧合而已），之前在labs.bittorrent.com上，现在改到了getsync.com上了。
这个工具必须要说一下，因为这货基本上是颠覆了我们对云盘的理解。
优点：首先是匿名性（包括匿名分享，我不会告诉你们好莱坞XX门几乎每周都有更新的！），BT的先天优势；再就是几乎（仅需要和服务器进行微小数据量的同步）offline，所有数据都是在自己信任的地方之间sync（例如自己的笔记本和自己的手机之间同步）；然后就是这玩意儿强大的兼容性，和Dropbox不相伯仲；最后的最后，也是更华丽的，这货居然提供命令行启动方式 &amp;mdash; 这意味着随便租一个VPS（例如不限存储量的DH）就可以搭建私有云了！
缺点：最大的问题就在于，偶尔会想，能有个服务器避免数据丢失也不错。
目前个人在用的是OneDrive/微云/百度盘/BitTorrent Sync（而且我都没付钱。。。）
因为还没有一个网盘可以一次满足我所有要求。。。
敏感/重要数据：加密放在OneDrive
重要/一般数据：放在微云（百度盘基本上仅用来离线下载）
常用数据：通过BitTorrent Sync来同步
我想，不管对技术是多么的不屑（遍身罗绮者，不是养蚕人。。。），也不得不承认这是一个技术越来越少的受限于基础带宽的时代，这也意味着基于云端的各类服务只会越来越多，也越来越容易使用；试着找一个自己喜欢的，靠谱的云服务，然后尽情享受技术带来的便利吧。</description>
    </item>
    
    <item>
      <title>谈谈12306的数据泄露</title>
      <link>/posts/about-data-leak-from-12306/</link>
      <pubDate>Thu, 25 Dec 2014 09:51:13 +0000</pubDate>
      
      <guid>/posts/about-data-leak-from-12306/</guid>
      <description>好奇的不仅仅是数据“如何”泄露，更好奇的是哪位同学居然敢老虎嘴里拔牙，敢情也是不想在大天朝混了。
看报道说是被撞库了（个人意见：12306今年的表现确实可圈可点）。那往前推，最可能的还是CSDN那次明文密码（大500W）泄露事件（后面有一次更大规模的17173/uuu9的泄露，也是受CSDN那波的影响）。
那就拿这13W的数据（纯研究，不提供下载链接 &amp;ndash; Google，你懂的）分析下看看吧。
祭出杀器Notepad++，打开居然是乱码。。。改编码到GB2312，恢复正常。
考虑到CSDN上男女比例应该严重失调，那就验证看看～
先统计一下女生（*身份证倒数第二位是偶数*）的数量。
打开正则表达式的WIKI（对，我就是记不住），当然也可以用RegExr～
\d{16}[02468](?=\d{1}|[xX])  然后Notepad++只hit到9860个结果。。。131653行的数据。
这男女比例（约12.4：1）。很符合CSDN的特征啊。
没错，CSDN，社工事业先驱者。
接下来的事情就比较有趣了，例如翻翻找找本地的妹纸啊，然后以*“同学你账号泄露了”*为名去勾搭吧～
随手查一下，*被泄露的成都本地90后妹纸*（正则：
510\d{3}199\d{7}[02468](?=\d{1}|[xX]) ```）有51个（就不截图了，你懂的～） 哈哈哈～ --- 【2014/12/26更新】 [12306网站泄密事件进展：2名犯罪嫌疑人已被抓](http://tech.sina.com.cn/i/2014-12-26/doc-icczmvun4410202.shtml) 呵呵，咱们开头说啥来着。 --- 【2015/1/7更新】 nodepad++确实神器，可惜ubuntu上用起来太麻烦。 直接上grep好啦，命令稍微改改（`\d`这种无法识别，用[0-9]代替） 例如搜索90后妹纸： ```language-bash grep -cE &#39;[0-9]{6}199[0-9]{7}[02468]([0-9]{1}|[xX])&#39; 12306.txt  结果只有1927个，但是notepad++上报出来是1928个。
很奇怪，还特意祭出Beyond Compare来比较结果，发现原来notepad++重复统计了某一行（那一行的同学，用身份证做账号。。。）
问题解决～</description>
    </item>
    
    <item>
      <title>Android docs (OpenGLES)</title>
      <link>/posts/android-docs-opengles/</link>
      <pubDate>Thu, 25 Dec 2014 08:39:37 +0000</pubDate>
      
      <guid>/posts/android-docs-opengles/</guid>
      <description>最近在看OpenGLES，一直没机会系统的学习，算是补补以前的遗漏；结果发现了Android对应的官方文档。
也不知道什么时候慢慢补全完善的Android文档，终于可以看得入眼，并且有一些确实不错的内容了。
Training不那么鸡肋了。
Guide也比以前好多了。
推荐一下Android关于OpenGLES的Training和Guide。
尤其是这一段开头：
 Being able to define shapes to be drawn in the context of an OpenGL ES view is the first step in creating your high-end graphics masterpiece. Drawing with OpenGL ES can be a little tricky without knowing a few basic things about how OpenGL ES expects you to define graphic objects.
 对，我相信初碰FFmpeg或者类似复杂框架时候，也必然会遇到这些“Tricky”但须遵循的逻辑和规则；深究下去后，自然会明白这么设计的初衷；OpenGLES也不例外。
而熟悉这些框架的过程就像驯服野兽：先适应它（强迫接受这概念），然后彼此获得信任（哦这样的代码(Sample)确实可以如它所说工作；按照这样的修改后它的表现也确实更好了），最后才能驾驭它（原来这样设计是基于底层这样那样的限制啊）
尝试去了解那些当初铺垫整个虚拟世界基石的先驱设计者们，他们面对这样那样的限制和难题，如何想出并实现各种精妙的方案；这会让每次的深入探索都像在翻一段无人知晓的历史，那种对无尽知识的感慨和对自身所学的匮乏之间的冲突会让人欲罢不能。
换个角度看，这欠的，也是醉了。
话说回来，Android也越来越像样子了~ 哈哈哈～</description>
    </item>
    
    <item>
      <title>关于FFmpeg（进阶）</title>
      <link>/posts/about-ffmpeg-advance/</link>
      <pubDate>Wed, 24 Dec 2014 09:11:09 +0000</pubDate>
      
      <guid>/posts/about-ffmpeg-advance/</guid>
      <description>基本篇在此。
目前仅使用到了ffmpeg的读写文件/编解码功能，并未使用其去直接渲染。
这里说是进阶，其实也只能算浮于表面。因此主要记录使用ffmpeg以来遇到的坑，版本差异，android版本编译等。So，这里就不继续采用Q&amp;amp;A的方式了。
（本文并非通过ffmpeg.exe\bin传递command来进行处理，而是直接调用ffmpeg相关libraries中的api）
####FFmpeg libraries FFmpeg有以下库：（2014/12/24 ffmpeg 2.5.2），主要功能列在About中有基本介绍，这里不再赘述。
 libavutil 54. 15.100 libavcodec 56. 13.100 libavformat 56. 15.102 libavdevice 56. 3.100 &amp;mdash; 未使用 libavfilter 5. 2.103 &amp;mdash; 未使用 libavresample 2. 1. 0 &amp;mdash; 未使用 libswscale 3. 1.101 libswresample 1. 1.100 libpostproc 53. 3.100 &amp;mdash; 未使用   ####FFmpeg基本 首先，官方文档为第一参考文档；其次就是源码（这里把*源码*放到这么靠前的原因下文会提到）。
FFmpeg的官方文档算是比较全的。 一些常见case的testbed都可以找得到；例如2.5版本，编解码的sample
同时官方的例子并非浅显易懂，但是因为层次简单，所以调用逻辑很清楚；参考着这些文档/Sample就可以按需设计一个简化版Adapter了。
####FFmpeg基本调用逻辑 还记得Decode/Encode和Muxer/Demuxer吧，如果还记得那就很好理解了。下面截选了部分代码（不要在意细节），有一些重要关键但非流程相关的步骤这里先省略（例如FIFO等），下文再提。
#####Encoding（Based on 2.x） - Register all codec //应该是plugin的机制
av_register_all(); avcodec_register_all();   Find encoder -&amp;gt; create stream -&amp;gt; open encoder  /* find the audio encoder */ p_audio_codec = avcodec_find_encoder(m_p_fmt_ctx-&amp;gt;oformat-&amp;gt;audio_codec); if (!</description>
    </item>
    
    <item>
      <title>Astrill VPN</title>
      <link>/posts/astrill-vpn/</link>
      <pubDate>Tue, 23 Dec 2014 13:21:48 +0000</pubDate>
      
      <guid>/posts/astrill-vpn/</guid>
      <description>自用推荐：值得花钱系列
VPN，在大天朝生活的必备工具。一个好的翻墙工具可以显著提升生活品质。（这里应省略1000字的溢美之词和1000字对GFW的“溢美之词”）
Astrill是自己一直在用的VPN。当然还有一个免费的翻墙利器goagent，除了偶尔抽风也没其他坏处了（这真的不是补刀）。
Astrill的最大优势在于 &amp;mdash; 稳定。对，不管是连接速度，还是服务器数量，甚至他们的年费价格，都相当稳定。。。
使用非常方便，几乎是全系统支持。Android/IOS/MAC/Windows/Linux/OpenWRT（WP, sorry），客户端界面也很友好。
另外有针对性的反GFW方案（额外收费），这段介绍如此经典，必须截图留念：
 霸气外露： As a response to Great Firewall of China VPN blocking events, we decided to create a new VPN protocol that is not detectable as VPN protocol and which works in China.
 缺点也有一点（价格就不继续吐槽了），就是这玩意儿在某些地方表现的并不接地气（这本来也不是本地的。。），例如奇怪的smart模式，简单说，不需要翻墙的站点也会翻墙再翻回来。。。
官网在此
报价在此[据说安装IOS客户端，应用内付费，在天朝内购买只要25RMB/月，258RMB/年，这尼玛算是特殊优惠么。]
顺便记录一下Astrill android版本的APK下载链接，也save到云端一份，免得又忘记了（不然又陷入先有鸡还是先有蛋的破逻辑）。
最后，说回到安全性。
有人爆料说Astrill依然会记录logs（例如访问记录等等），并且还抄袭等等。
至于用不用那，见仁见智。
附上Astrill的隐私协议。</description>
    </item>
    
    <item>
      <title>DexIndexOverflow</title>
      <link>/posts/dexindexoverflow/</link>
      <pubDate>Tue, 23 Dec 2014 09:24:48 +0000</pubDate>
      
      <guid>/posts/dexindexoverflow/</guid>
      <description>Android工程，在工程代码较多（或复杂），依赖工程较多时，容易出现这个编译报错。
简单说就是Dex不支持非jumbo模式下，函数数量超过65535（请联想Youtube/鸟叔/点播次数）
一般修改方式如下：
Eclipse：
在project.properties（主工程）中增加
dex.force.jumbo=true  Android Studio：
在build.gradle（主工程）中增加
android { dexOptions { jumboMode true } }  </description>
    </item>
    
    <item>
      <title>我的书单</title>
      <link>/posts/my-book-list/</link>
      <pubDate>Tue, 23 Dec 2014 05:47:39 +0000</pubDate>
      
      <guid>/posts/my-book-list/</guid>
      <description>不能算特别喜欢看书，但是看书用来打发时间还是不错的。
列了一下自己的书单（主要是今年的，之前的能想起来就列下来，不然就算啦），作为记录。</description>
    </item>
    
    <item>
      <title>Book list</title>
      <link>/book-list/</link>
      <pubDate>Tue, 23 Dec 2014 02:56:18 +0000</pubDate>
      
      <guid>/book-list/</guid>
      <description>####2014&amp;frasl;2015
######在看 &amp;gt;《设计心理学2》
 《设计模式》
 ######想看 &amp;gt;《算法导论》
######已看 （按时间逆序）
 《CMOS图像传感器集成电路 &amp;ndash;原理、设计及应用》 &amp;gt;科普：如何从“光线”生成“raw buffer图像信息”
 《少妇白洁》（18禁） &amp;gt;以女性视角展开的成人小说
 《三体》 &amp;gt;地球-太阳系-银河系-宇宙；欲罢不能的看完全集；面对宇宙，无知的人类，是多么渺小。
 《影响力》（在这里看的“压缩版”~） &amp;gt;潜移默化的心理学
 《囚徒健身》 &amp;gt;这节奏完全停不下来~
 《ios核心动画高级技巧》 &amp;gt; IOS动画“入门”可以快速浏览的一本书；前五章了解结构（其实UI框架都差不多），后几章熟悉技巧；翻译的很多地方值得商榷（但翻译很辛苦，值得认可）
 《设计心理学》（The Design of Everyday Things） &amp;gt;深层次回答，设计的What,Why,How问题
 《别让我思考》（Don&amp;rsquo;t make me think） &amp;gt;用序中作者老婆的话来概括（大意）即：I won&amp;rsquo;t visit it if it&amp;rsquo;s complicated。
 《商战》 &amp;gt; 最后的最后，还是一个度的抉择问题。标准回答是：It depends，不是么。
 《随遇而安》 &amp;gt;一个人生流水账
 《打造Facebook 亲历Facebook爆发的5年》 &amp;gt; 副标题很好的诠释了本书内容
 《我的抗战》 &amp;gt; 换个角度看那段历史
 《浪潮之巅 第二版》 &amp;gt;各种大公司的八卦，因果分析略有马后炮的感觉。BTW，个人觉得本书最关键的不是告诉你这些公司为何成功/失败的，而是告诉你，这些巨头，一样是由普通人运作的。而普通人，就一定会有精明或犯浑的时候，巨头也一样。</description>
    </item>
    
    <item>
      <title>《设计心理学》</title>
      <link>/posts/the-design-of-everyday-things/</link>
      <pubDate>Mon, 22 Dec 2014 03:25:03 +0000</pubDate>
      
      <guid>/posts/the-design-of-everyday-things/</guid>
      <description>一本不错的书，浅显易懂的讲述了设计对日常生活的影响，并深层次的分析了为什么好的设计会“易用”和“易于理解”，以及如何基于若干基本原则进行设计。
更多的体会难以用言语来表达，还是用本书的序作为总结吧（之前也曾有类似体会，但未曾如此深入）：
 我们每个人都是一个“复杂的，开放的巨系统”，是一个知识、记忆与幻想的综合体，是一本书，是环境磁场中的一粒小铁屑，是操作手册，是经验清单的混合，是一个世界。
在我们的日常生活中，沿时间轴从我们眼前流动而过的外部世界是一系列人、物、事件、话语、行为、意义等。“意识里的世界”与“环境中的世界”每一时刻都在进行着信息的交换、打散、重组、混合，而我们每一时刻都在进行着适应性的选择、决策、行动。
 </description>
    </item>
    
    <item>
      <title>Chrome cannot open profile correctly</title>
      <link>/posts/chrome-cannot-open-profile-correctly/</link>
      <pubDate>Fri, 19 Dec 2014 14:57:26 +0000</pubDate>
      
      <guid>/posts/chrome-cannot-open-profile-correctly/</guid>
      <description>Ubuntu版本的Chrome，很容易出现Profile cannot be opened correctly的错误。
结果就是无法正常使用账户同步功能（不能多设备同步我还用你干嘛！？！）
翻了翻资料，看了看log，发现这种时候新启动的chrome尝试去打开一个已经lock住的数据库（这不科学），然后就报错了。
继续翻，貌似每次第一次启动的chrome没有正常关闭，依然占用数据库（单例真的好么）。结果就是后面再启动的chrome尝试open，然后失败。
官方解决方法目前未找到。。。土方法就是 language-bash ps -A | grep &#39;chrome&#39;  然后kill吧。
Chrome现在也略不靠谱啊。T_T</description>
    </item>
    
    <item>
      <title>Onedrive Online无法访问</title>
      <link>/posts/onedrive-service-unreachable/</link>
      <pubDate>Fri, 19 Dec 2014 06:56:39 +0000</pubDate>
      
      <guid>/posts/onedrive-service-unreachable/</guid>
      <description>这几天偶尔出现这个“OneDrive unreachable”，麻烦的是，导致我甚至不能正常使用onenote（放在onedrive上的）了。
更奇怪的是，Chrome打不开（在线版本），但是Firefox正常工作。
想想MS和google不至于这么小心眼儿互掐。所以搜了一下，结果发现了这篇【微软OneDrive疑被屏蔽】
试着换了下google的开放DNS（实在太好记了，8.8.8.8,8.8.4.4）
结果就好了。Firefox正常的原因可能是有DNS缓存或者用自己的DNS。
大天朝不易啊，雾霾就算了，DNS污染也很严重。T_T</description>
    </item>
    
    <item>
      <title>Ubuntu14.10启动黑屏</title>
      <link>/posts/ubuntu-14-10-boot-black-screen/</link>
      <pubDate>Thu, 18 Dec 2014 07:35:40 +0000</pubDate>
      
      <guid>/posts/ubuntu-14-10-boot-black-screen/</guid>
      <description>现在在慢慢习惯Ubuntu做主系统，所以把小黑直接“刷”上了14.10，结果遇到了重启会黑屏的诡异问题（每次都要手动强制关机再启动）。T_T，不折腾会死啊。。
网上搜了一下，也没有具体的解决方案。但隐约都指向了显卡驱动。
那就试试看吧。
先
ubuntu-drivers devices  推荐使用的是nVidia的331驱动。
打开Additional Driver，显卡（古老的NV3100）默认选择的不是331。
那就果断换之～
之后重启（除了cryptsetup界面有点丑），一切正常～
～Tada～</description>
    </item>
    
    <item>
      <title>长白山滑雪度假</title>
      <link>/posts/ski-at-cbs/</link>
      <pubDate>Fri, 12 Dec 2014 11:50:10 +0000</pubDate>
      
      <guid>/posts/ski-at-cbs/</guid>
      <description>知道长白山滑雪度假区是前年的事情。
第一次体验是去年的事情。
这次去（十一月底到十二月初）已经是第三次了。
也是这个地方让我知道“度假”是个什么概念。
就像我们吐槽了很久的三亚一样，度假也就睡睡觉，晒晒太阳，玩玩水，回家。
这里，长白山，就是睡睡觉，晒晒太阳，滑滑雪，泡泡温泉，回家。
轻松惬意，每天或规律或不规律的享受一下匆匆流走的时光。不去多想多念多思考。这样就蛮好的。
每一次到那里都有一些不同的感受。
第一次去，两个人，感觉雪道好多，设备正规，铺天盖地莽莽白色，撒欢的玩啊。
第二次去，一个人扛着板子，除夕夜，飞机晚点凌晨才到酒店，待了几天，本想思考思考人生，结果全用来刷道了。
第三次去，四个人，去的早了，雪道开的不多，而且果松岭的雪场没开，要去小镇。在魔毯和初级道玩了几天，最后一天拉着胖子上了G5，也算让他功德圆满一次。
给我的感觉是，滑雪很有趣，雪中泡温泉很赞。度假也就应该如此吧～
每次去之前想到那里好好思考的问题，全都没去想；等回去再面对或者就这么慢慢忘掉吧。也无所谓。
不断尝试不断发现不断折腾 不就是这短暂人生的那么一点点意义么（脑海中闪过星际穿越的各种画面）。
上真相一张（无后期）：
至于攻略。。。我觉得度假和旅行最大的差别就是，不需要攻略。
订好机票，订好房间。出发就好了。
从落地一直到准备离开，全程都不用操心。就这么随意～</description>
    </item>
    
    <item>
      <title>等不到OTA的Nexus5</title>
      <link>/posts/nexus5-manually-ota-to-lollipop/</link>
      <pubDate>Mon, 08 Dec 2014 12:59:04 +0000</pubDate>
      
      <guid>/posts/nexus5-manually-ota-to-lollipop/</guid>
      <description>美版刷了电信的Nexus5，11月13号就陆续概率发布的OTA，到现在都没收到，也是醉了。。。
手贱决定线刷OTA（sideload）。参考机锋教程
其中有一个步骤可能会卡住，就是准备adb sideload的时候，报：
insufficient permissions for device  解决方法就是用sudo，找到adb的路径（adk的platform-tools下面）
sudo ./adb kill-server sudo ./adb devices （这里会重启adb并列出对应的设备） sudo ./adb sideload &#39;xxx.zip&#39;  然后就静静的等待吧。。。
我还在等待 T_T
杯具了。。连续杯具3天。原以为一步搞定的。。。
电信的苦逼用户真是无可奈何。上了5.0，恢复EFS无效，最后迫不得已全清，然后从4.4.4开始刷。折腾快3天，系统从4.4.4刷到4.4.2又刷回5.0。。。
最后看到电信3G冒出来的时候真是泪流满面啊。。。
重新整理一下破解思路，如下：
 数据全清，重刷底包到4.4.4（数据自行备份，使用google身份验证器（基于OTP）的一定要备份，据我所知不止一个站点，支持了OTP但是在无原始OTP的情况下，不能重置）
 刷回4.4.4，启动系统后打开开发者模式。重启bootloader。
 刷TWRP的recovery，建议刷2.8.1的版本（这个版本在recovery模式下支持MTP，方便copy EFS的备份），重启会提示是否root，确认。
 重启系统后按照TWRP的提示，开始root。
 root后安装最新版的Nexus Field Test（需要最新版3.3；因为2.x的版本不支持4.4.3以上系统），DDD001（看过教程都懂的。）
这里注意，新版本的NFT，如果要获取SPC的话，需要通过右上角-&amp;gt;Setting(View)-&amp;gt;LTE-&amp;gt;Edit来获取。
 重启recovery，恢复EFS（同时恢复data更容易成功）或者重新破解，来恢复电信通话/短信/3G功能。 注意事项：
 破解时，ruim only总是被重置的话，建议用cdma workshop 来写。 破解时，cdma hdr总是被重置的话，建议插卡破解 破解时，每次重启建议通过锁屏键关机再重启，而不是用命令。目测关机时，基带也有一个关闭的过程，可能会记录一些状态来方便快速重启，如果直接命令关机可能导致重启后reset。 DFS可以使用新版本。   &amp;ndash;&amp;gt;到这里，4.4.4的电信就算破解完毕了。如果已经到了5.0，电信掉了还不死心的，请从这里开始看
 重启bootloader，直接线刷5.0（切记：数据备份，EFS备份），要保留数据的出门左转，我的数据已经清掉了所以也没办法试了。
注意：线刷有一些不同的版本，都是为了保留数据，有的教程是用修改flash版本的img来sideload的，有的教程说去掉-w的方法来update img，有的教程是只手动flash了boot/system/cache img；
我用的是版本是后者，但是接着就恢复出厂设置了。（所以和完整刷5.0底包没区别）【目测有些运气不错的同学，保留了数据又吃上了棒棒糖，给力～】
 恢复出厂设置后重启，并（想保留数据的，从这里开始看）重新root（即通过recovery刷supersu的2.37 zip包）
 重新安装NFT3.3版本，重新设置LTE，到DDD001（注意手动选择移动网络到3G，不然第一个选项可能无法disable）
 重点来了：关机-&amp;gt;拔卡-&amp;gt;恢复EFS-&amp;gt;开机-&amp;gt;插卡。如果3G信号+感叹号出来了，就意味着搞定了（我是一次搞定，回想之前刷失败的原因，应该就是忘记去设置DDD001）。 注意事项：</description>
    </item>
    
    <item>
      <title>Android studio 1.0 RC (更新)</title>
      <link>/posts/android-studio-1-0-rc/</link>
      <pubDate>Fri, 21 Nov 2014 07:00:33 +0000</pubDate>
      
      <guid>/posts/android-studio-1-0-rc/</guid>
      <description>终于等到Release了。。。
算是canary尝鲜版吧。
不易啊，跟进！
补充一个严重issue：[2014/11/24]
使用1.0RC版本，Close工程的话，再次进入会自动下载ADK而不去检查已经存在的ADK。。。
解决方法：
关闭Android Studio后删除该目录：
 系统盘/User/你自己啊/.AndroidStudio
 然后重新启动Android Studio并重新导入以下目录的配置文件：
 系统盘/User/你自己啊/.AndroidStudioBeta
 一切正常了。。。（还有一个大招是启动之前拔网线，然后就可以Skip了。。。）
路漫漫其修远兮啊。。。
T_T
继续补充。出去度假回来，结果都已经RC4.0了。。。你这版本号升级规则改的有点高调吧亲。
放羊两天（刷5.0。。。）居然已经1.0.0咯。。。这版本号真是随意啊～
打开ADK页面
发现Android studio居然转正（Official）了！而ADT bundle连下载链接都没了（动作真快）。。。
看来跟上的步伐不算慢，哈哈哈～</description>
    </item>
    
    <item>
      <title>Android java.lang.ClassNotFoundException</title>
      <link>/posts/android-java-lang-classnotfoundexception/</link>
      <pubDate>Wed, 19 Nov 2014 09:07:32 +0000</pubDate>
      
      <guid>/posts/android-java-lang-classnotfoundexception/</guid>
      <description>ClassNotFound原因较多，这里列一个特殊case：
抽象类A，因项目关系，code clean后，已无抽象方法（但依然带着abstract关键字）
没深究过java语法，不过没有抽象方法却声明为抽象类，至少该有个警告把？而这里Eclipse（ADT）/Android studio均无任何提示，所以怀疑是JDK的bug）。
Main activity继承自A。然后启动Main activity即报ClassNotFound。
log里面会有奇怪的：
11-19 16:51:21.301 W/dalvikvm(31571): Unable to resolve superclass of LxxxA; (207) 11-19 16:51:21.301 W/dalvikvm(31571): Link of class &#39;LxxxA;&#39; failed 11-19 16:51:21.301 W/dalvikvm(31571): Unable to resolve superclass of LxxxMain (1447) 11-19 16:51:21.301 W/dalvikvm(31571): Link of class &#39;LxxxMain;&#39; failed  修改方法很简单，把那个无用的abstract关键字去掉就好了。
记录一下。</description>
    </item>
    
    <item>
      <title>坑爹的淘宝秒杀（更新）</title>
      <link>/posts/damn-tao-bao-miao-sha/</link>
      <pubDate>Tue, 18 Nov 2014 02:32:12 +0000</pubDate>
      
      <guid>/posts/damn-tao-bao-miao-sha/</guid>
      <description>那天晚上闲来无事，试试手气，就参加了秒杀。
结果居然秒到了！！
哈哈～ 本来1块钱也没指望能买啥东西，拿到手就准备上淘宝二手卖掉了。
结果这两天问客服，答曰：
 feng*:
你好。亲亲。在的呢！ 关于**号晚上的秒杀。是淘宝系统失误。我们已经联系官方小二处理。暂时不会安排发货。请知晓！
 我擦。。。
现在我的淘宝广告推荐都变成高跟鞋了，你就告诉我一句不发货？
妈蛋！已经无法再信任这个世界了！坑爹！
补充一下，在各种淫威下，发货了。不过尺码不保证。
再补充一下，后面陆续又秒杀了若干东西。例如beats的耳机。。。等。。。
上个页面，造福后人。</description>
    </item>
    
    <item>
      <title>Jenkins单工程跨多代码目录</title>
      <link>/posts/jenkins-with-multi-svn-paths/</link>
      <pubDate>Thu, 13 Nov 2014 02:27:24 +0000</pubDate>
      
      <guid>/posts/jenkins-with-multi-svn-paths/</guid>
      <description>偶尔会遇到这种情况，例如工程A，工程B，同时依赖工程C（公共库）
而一般情况下，如果代码结构管理的好，工程C的svn（git）路径和工程A/B是完全分开的。
编译的时候正常导入（其实Android studio这里是有坑的，index无法排除目录）就好了。而Jenkins就需要特别配置一下。
增加对应的工程（这里使用的svn module是Subversion Release），如下：
（BTW，注意Local module directory，最好和本地代码路径保持一致，不然按照工程目录下的project.properties找不到对应工程就呵呵了）
这时候会发现，环境变量$SVN_REVISION很可能不干活了。
翻了下文档：
 Subversion Revision and URL information as Environment Variables
The Subversion SCM plugin exports the svn revisions and URLs of the build&amp;rsquo;s subversion modules as environment variables. These are $SVN_REVISION_n and $SVN_URL_n, where n is the 1-based index of the module in the configuration.
For backwards compatibility if there&amp;rsquo;s only a single module, its values are also exported as $SVN_REVISION and $SVN_URL.</description>
    </item>
    
    <item>
      <title>拉上Google一起对抗Ebola</title>
      <link>/posts/help-fight-ebola/</link>
      <pubDate>Wed, 12 Nov 2014 02:40:06 +0000</pubDate>
      
      <guid>/posts/help-fight-ebola/</guid>
      <description>Ebola目前的形势还不容乐观。
在Google首页居然看到了活动（1%发布么T_T）：Help figh Ebola. For every $1 you give, Google will give $2.
想了下，还是要do something的，就去donate了$5。
有兴趣的一起上吧～
离目标$750W不远啦！
【2015/1/23 忘记更新了。。。貌似第二天还是第三天就筹满了～ 】</description>
    </item>
    
    <item>
      <title>关于Bitlocker</title>
      <link>/posts/about-bitlocker-remake-u-key-disk/</link>
      <pubDate>Mon, 10 Nov 2014 03:51:50 +0000</pubDate>
      
      <guid>/posts/about-bitlocker-remake-u-key-disk/</guid>
      <description>什么是Bitlocker就不赘述了，各类百科够用。
简单说就是一种傻瓜式（相比较其他各类加密软件）的数据加密方案，一次加密，受用终生。
不幸的是，从原理上来讲，这种加密（这里指对系统盘的加密）是必须依赖一个三方模块（一般是独立硬件）来存放密钥的（钥匙放门上，门再结实也不安全）。
一般使用的模块叫TPM，这个模块国内的笔记本（台式机更稀缺了）是没有的（这个就要看TPM和TCM的差异了，这种涉及加密的标准，国家限制是很严格的）。
当然，要可以用其他硬件来代替TPM，如U盘，对，就是一个普通的U盘，里面塞满片儿都无所谓的那种。
如果有TPM，那么加密解密都很方便，设置后用密码登录系统就够了，和平时使用没什么差别（无非就是密码要强壮一些，不然门是够结实，但是锁一碰就坏掉了，那也谈不上安全）
但如果是用U盘，那么每次开机都需要插上U盘，确保系统可以访问到U盘来获取解密密钥。稍微麻烦点，但换个角度，带TPM的机器（笔记本）一般动辄就上万（例如thinkpad的T/X/W系部分型号），普通笔记本+U盘可就便宜多了去了。
但使用U盘有个小问题，就是U盘不能轻易格式化。
因为密钥以一种特殊的隐藏文件形式放在U盘上，如果格式化了，这密钥就丢了。唯一的办法，就是使用recoverykey &amp;mdash; 在第一次加密的时候，会提示你保存下来，非常重要！我相信肯定有不明真相群众放在加密后的系统目录下的（钥匙落在屋里了，有木有）。
(BTW，如果用的是win8/8.1，且使用微软账号登录的话，是可以把recoverykey直接保存在onedrive上的，相当方便。)
那U盘格式化了以后就都要用recoverykey了么？那一长串数字真是让人呵呵呵呵啊。
当然不是，翻看一下recoverykey的文档（不是闲的蛋疼，就是遇到了这个情况 T_T），在进入系统后，是可以重新制作一个key U盘的。
以管理员身份运行cmd（假设目标U盘的盘符是G）：
manage-bde.exe -protectors -add c: -rp -rk g:  运行一下～
Tada~ （写这么久就为了show这最后一个命令也是醉了。。。）</description>
    </item>
    
    <item>
      <title>Android studio的一些坑</title>
      <link>/posts/android-studiode-common-questions/</link>
      <pubDate>Fri, 07 Nov 2014 06:37:01 +0000</pubDate>
      
      <guid>/posts/android-studiode-common-questions/</guid>
      <description>Android studio会慢慢替换掉Eclipse，从来作为Android的主力IDE。
但是目前存在的问题还是蛮多的，这里简单罗列一下（有更新陆续补充）：
####报错：duplicate files during packaging of APK 在主工程的build.gradle增加：
android { packagingOptions { exclude &#39;META-INF/LICENSE.txt&#39; } }  ####提示Error: Missing one of the key attributes &#39;action#name,category#name&#39; on element intent-filter at AndroidManifest.xml 将
&amp;lt;intent-filter android:priority=&amp;quot;1000&amp;quot; /&amp;gt;  改为：
&amp;lt;intent-filter android:priority=&amp;quot;1000&amp;quot;&amp;gt; &amp;lt;action android:name=&amp;quot;HEHEHE&amp;quot; /&amp;gt; &amp;lt;/intent-filter&amp;gt;  ####奇怪的编译错误：illegal character: &#39;\ufeff&#39;：
Android studio 调试过程中出现：非法字符： \65279
java: F:\android\Lock_QinZDLock\src\com\qin\lock\SliderRelativeLayout.java:1: 非法字符： \65279  解决方法：使用Notpad++打开 格式 选择保存为无bom编码 格式UTF-8不需要BOM来表明字节顺序，但可以用BOM来表明编码方式。字符&amp;rdquo;ZERO WIDTH NO-BREAK SPACE&amp;rdquo;的UTF-8编码是EF BB BF。所以如果接收者收到以EF BB BF开头的字节流，就知道这是UTF-8编码了。
来自 http://blog.taorenjia.com/?p=319</description>
    </item>
    
    <item>
      <title>关于Android如何动态加载res</title>
      <link>/posts/about-loading-res-from-apk-directly/</link>
      <pubDate>Fri, 07 Nov 2014 03:15:58 +0000</pubDate>
      
      <guid>/posts/about-loading-res-from-apk-directly/</guid>
      <description>最近抽时间看了一下android插件化的东西。
也稍微研究了一下。总结一下权当记录。
同时也把研究过程中的testbed上传到github了，造福后人吧。
####为什么需要插件化？
最简单的原因大概就是为了避免过大的体积（rom size），以加速下载和安装。
更多的原因例如插件化后可以单独升级避免每次一个小改动就app体量的升级，为了针对不同区域不同用户做不同的适配，为了市场更高的单app评分（插件的差评不算主app中）等等。
####哪些可以插件化？
大部分的功能性代码/资源及非自定义的布局
####可用插件化方案： 这里仅讨论：以apk（在插件化的前提下，相比较jar，apk要灵活的多）的形式插件化的方案。
这里不讨论：自行定义数据格式，并自行实现解析器（parser或LayoutInflater）的方案。（因为造这种轮子总让我想起曾经一个叫XXUI的垃圾框架。。。）
 已安装插件apk的情况下：
 读取静态资源（如png/jpg等） 可以通过AIDL的方式直接获取，这里不赘述。
 读取并执行功能函数： 同上。参数不可序列化的情况，可参考下面“不安装插件apk的情况”
 读取布局 简单布局同上，自定义布局不确定是否可行（不过已经安装了，这就不重要了）。
 直接启动activity 因为已安装，所以直接intent去start acitivty即可。
  未安装插件apk的情况下：
 读取静态资源（如png/jpg等）
例如从包名com.example.plugin里，读取名为test的drawable资源
String libPath = Environment.getExternalStorageDirectory() + &amp;quot;/Plugin.apk&amp;quot;; try { AssetManager assetManager = AssetManager.class.newInstance(); Method addAssetPath = assetManager.getClass().getMethod( &amp;quot;addAssetPath&amp;quot;, String.class); addAssetPath.invoke(assetManager, libPath); mAssetManager = assetManager; } catch (Exception e) { e.printStackTrace(); } Resources superRes = super.getResources(); mResources = new Resources(mAssetManager, superRes.</description>
    </item>
    
    <item>
      <title>快件骗局</title>
      <link>/posts/lie-to-delivery/</link>
      <pubDate>Thu, 06 Nov 2014 08:22:09 +0000</pubDate>
      
      <guid>/posts/lie-to-delivery/</guid>
      <description>前几天在size下了一单直邮但不可跟踪（便宜）的国际件。
估摸着这几天也快到了。
结果刚接到两个电话，号码没记住（记性不好没办法），是从美国（+1）打过来的。
接通以后就是以下对话（非原文，大意如下）：
 “您好，您有一单快件连续三次无法投递，即将退运。 如需查询请按1， 人工请按9。”
 然后不管按哪个，电话都挂断掉了。
想想不太科学。 也蛮着急的，不会真是size的件吧。万一退回去多麻烦阿。
所以马上给size的客服留了言，请他们确认下目前的order delivery状态。
然后回过神来，觉得不太对。
 英国（.co.uk）的网站就算是客服也不会是美国的电话吧？
而且美国打过来的电话说中文？
快递没投递的话也应该是local的快递部门联系我，那号码至少应该是国内（例如海关、邮政）的才对吧。
 Google了一下“国际件 电话 退回 转人工”， 结果翻到了诈骗的字眼。
恍然大悟，原来如此。差点儿中招阿。
估计情况是这样：
这笔快件的信息被卖给了诈骗集团
因为两个电话，不管是按1还是9，都无法继续接通。估计是线路问题。
所以这诈骗集团的这套系统可能部署上有点问题（这么分析我还真是闲的蛋疼）。
那是谁卖的信息那？
考虑到size.co.uk是正规B2C卖家，如果因为卖信息而失去了顾客降低了声誉，得不偿失。基本可以排除公司卖信息的可能。
可能是黑客/个人行为/快递公司。 也懒得去确认了。
信息泄漏太多，麻木就算了，还差点上当。
记录下来引以为戒。</description>
    </item>
    
    <item>
      <title>Jenkins会OOM</title>
      <link>/posts/jenkins-out-of-memory/</link>
      <pubDate>Tue, 04 Nov 2014 02:51:39 +0000</pubDate>
      
      <guid>/posts/jenkins-out-of-memory/</guid>
      <description>本来还打算在AWS的服务器上搭个jenkins来自动化编译的。
配置都配置好了，但是跑着跑着就会报502（nginx倒是很直白）
后来才发现，服务直接被关掉了（
sudo service jenkins status  ）
估计是内存不够（主目录已经转移到了单独的硬盘上，空间肯定够的）导致了一系列问题后挂掉了吧。毕竟是AWS的最低配的EC2（VPS） T_T
网上一查，官网没找到有最低硬件配置要求，但还真有维护人员指出了这一点：
 CPU : n/a (bye bye plain old school CPU at least ;) )
RAM : 1GB (I prefer 2)
HDD : depends on the needs. For my use, a 8 modules j2ee maven project + db scripts (6500 lines of code) represents less of 50 MB. I configured Jenkins to store 10 builds (500 MB)
 报着也许我搞错了吧的心态（其实是死马当活马医了。。），double check了/var/log/jenkins/jenkins.</description>
    </item>
    
    <item>
      <title>Android Studio升级后无法完成sync</title>
      <link>/posts/android-studio-cannot-sync-after-upgrade/</link>
      <pubDate>Mon, 03 Nov 2014 03:13:29 +0000</pubDate>
      
      <guid>/posts/android-studio-cannot-sync-after-upgrade/</guid>
      <description>表现就是一旦sync，就下载gradle-all-2.1.zip的包，而且下载进度不动。地址是：https://services.gradle.org/distributions/gradle-2.1-all.zip
推测是android studio升级后（从0.8.x-&amp;gt;0.9.0），新旧文件有冲突。 如果目录C:\Users\XXXX.gradle\wrapper\dists\gradle-2.1-all\xxxxxx下面有2个0KB的文件，分别是gradle-2.1-all.lck和gradle-2.1-all.part，那这个基本就是出现不能sync情况的那个工程（一般一个xxxxxx目录对应一个工程）了。
解决方法就是：
  关掉android studio 删掉目录下的两个文件（.lck和.part） 将下载好的gradle-2.1-all.zip和解压后的gradle-2.1目录放到新目录下 运行android studio   Tada~~~
这时候应该就可以正常Sync啦～（正常的目录下会有gradle-x.x-all.zip.ok的文件，后缀很直白～）</description>
    </item>
    
    <item>
      <title>急性鼻窦炎</title>
      <link>/posts/ji-xing-bi-dou-yan/</link>
      <pubDate>Wed, 22 Oct 2014 04:19:39 +0000</pubDate>
      
      <guid>/posts/ji-xing-bi-dou-yan/</guid>
      <description>十一出行回来后就出现了间断的头疼（这也是最近实在无力更新的原因。。。）
一开始是右脑袋隐隐作疼
然后慢慢是一阵阵的胀痛
好像有什么东西在里面充气一样
然后右眼球也受压迫一样的酸疼无力
一开始还可以忍忍忍
但是这样持续不断的疼痛从最开始的2个小时左右
到了近6个小时都不停歇。。。
一直觉得自己算是蛮能忍疼的
毕竟当年不打麻药缝针啊也忍住了
当年打了麻药结果还有感觉那，就动刀了也忍住了
但是这次真的忍不了啊啊啊啊！
所以老老实实去了医院
先挂呼吸科
血检完说没有感冒发烧过敏迹象（这期间医生问我有木有鼻窦炎，我咋知道啊！）
转神经内科会诊。。。
然后到地方就去拍脑部CT
我想这下完了，这尼玛是脑瘤的节奏啊
还好还好没啥事儿
也没有脑膜炎（这期间医生也问我有木有鼻窦炎，我咋知道啊！）
医生没办法，开了点止痛药
但是这药么效果。。一点儿效果也没有。。
然后又去挂眼科，毕竟眼睛有痛感
然后查了一下说眼部有炎症，继续开药（这期间医生也问我有木有鼻窦炎，我咋知道啊！）
然后还是么的啥效果。。。滴眼药水的时候可以感觉到眼睛会舒服很多，但是疼痛感还是依然。。。
直到昨天，死马当活马医的去了耳鼻喉科，不都问我是不是鼻窦炎么，我去看看好啦！
结果那医生看到我的状态就大概猜到是啥情况了。。（T_T）
拍了CT（排队一个多小时，手里拿着133号看到才排到10x的时候那心情。。。）
然后确诊是急性鼻窦炎
医生问是开药还是挂点滴啊，挂点滴好的快一些。
挂挂挂挂啊啊啊啊啊！
挂完，觉得舒服多了。。。
T_T
一直以为鼻窦炎，字面意思就是流鼻涕吧
当初还没想通为什么鼻窦炎手术后的并发症会让人痛不欲生，吹的吧。
现在切身体会到了。。。才知道这尼玛真是想杀人的心都有的节奏啊。。。
想起来了去年的温岭杀医案，当时觉得这货疯疯癫癫的真是不能理解啊
现在真真切切感同身受过以后，觉得这位哥我懂你啊啊啊！我擦我真的懂啊！
T_T
不说了，引以为戒，及时就诊。</description>
    </item>
    
    <item>
      <title>Ghost upgrade to 0.5.3</title>
      <link>/posts/ghost-upgrade-to-0-5-3/</link>
      <pubDate>Wed, 22 Oct 2014 03:52:40 +0000</pubDate>
      
      <guid>/posts/ghost-upgrade-to-0-5-3/</guid>
      <description>改动不大，不过主题的css改动了一些。
参考0.5.2的升级，一个命令就搞定。
然后再手动更新一下logo的布局。
Tada~~</description>
    </item>
    
    <item>
      <title>优化RGB-&gt;YUV</title>
      <link>/posts/optimize-rgb-to-yuv/</link>
      <pubDate>Sat, 11 Oct 2014 09:27:07 +0000</pubDate>
      
      <guid>/posts/optimize-rgb-to-yuv/</guid>
      <description>网上随处可见YUV到RGB的优化，其中被借鉴最多的应该就是VP8的源码了吧：
// Copyright 2010 Google Inc. // // This code is licensed under the same terms as WebM: // Software License Agreement: http://www.webmproject.org/license/software/ // Additional IP Rights Grant: http://www.webmproject.org/license/additional/ // ----------------------------------------------------------------------------- // // YUV-&amp;gt;RGB conversion function // // Author: Skal (pascal.massimino@gmail.com) #include &amp;quot;yuv.h&amp;quot; #if defined(__cplusplus) || defined(c_plusplus) extern &amp;quot;C&amp;quot; { #endif enum { YUV_HALF = 1 &amp;lt;&amp;lt; (YUV_FIX - 1) }; int16_t VP8kVToR[256], VP8kUToB[256]; int32_t VP8kVToG[256], VP8kUToG[256]; uint8_t VP8kClip[YUV_RANGE_MAX - YUV_RANGE_MIN]; static int done = 0; void VP8YUVInit() { int i; if (done) { return; } for (i = 0; i &amp;lt; 256; ++i) { VP8kVToR[i] = (89858 * (i - 128) + YUV_HALF) &amp;gt;&amp;gt; YUV_FIX; VP8kUToG[i] = -22014 * (i - 128) + YUV_HALF; VP8kVToG[i] = -45773 * (i - 128); VP8kUToB[i] = (113618 * (i - 128) + YUV_HALF) &amp;gt;&amp;gt; YUV_FIX; } for (i = YUV_RANGE_MIN; i &amp;lt; YUV_RANGE_MAX; ++i) { const int k = ((i - 16) * 76283 + YUV_HALF) &amp;gt;&amp;gt; YUV_FIX; VP8kClip[i - YUV_RANGE_MIN] = (k &amp;lt; 0) ?</description>
    </item>
    
    <item>
      <title>FFmpeg提供给OPW一个实习岗位</title>
      <link>/posts/ffmpeg-secure-a-place-in-opw/</link>
      <pubDate>Sat, 11 Oct 2014 07:40:35 +0000</pubDate>
      
      <guid>/posts/ffmpeg-secure-a-place-in-opw/</guid>
      <description>原文如下：
 ####October 8, 2014, FFmpeg secured a place in OPW!
Thanks to a generous 6K USD donation by Samsung (Open Source Group), FFmpeg will be welcoming at least 1 &amp;ldquo;Outreach Program for Women&amp;rdquo; intern to work with our community for an initial period starting December 2014 (through March 2015).
We all know FFmpeg is used by the industry, but even while there are countless products building on our code, it is not at all common for companies to step up and help us out when needed.</description>
    </item>
    
    <item>
      <title>Ghost图片上传大小限制</title>
      <link>/posts/ghost-image-upload-limitation/</link>
      <pubDate>Thu, 09 Oct 2014 06:37:34 +0000</pubDate>
      
      <guid>/posts/ghost-image-upload-limitation/</guid>
      <description>Ghost通过ctrl+shift+i的华丽方式上传图片，会遇到一些问题。例如较大的图片上传，会报错。（大于1M）
由于一般架在VPS上的ghost都不是直接监听80端口，而是用nginx做前端转发；
所以推测八成被nginx限制住了。（可以参考ghost论坛）
nginx这边可以如下修改（老版本是在nginx.conf里面修改，那个波及面太广）：
直接修改site-enabled目录下面对应的站点config文件，在location /下面增加
 client_max_body_size 5m;
 即可（这里限制为最大5M，土豪随便改哈）。
重启nginx再试试～
Tada～</description>
    </item>
    
    <item>
      <title>星星/太阳/月亮</title>
      <link>/posts/star-sun-moon/</link>
      <pubDate>Thu, 09 Oct 2014 06:27:14 +0000</pubDate>
      
      <guid>/posts/star-sun-moon/</guid>
      <description>十一的时候因朋友前来，顺便去了趟台州临海括苍山（对，就是有一堆风电机组的那地儿）。
上去的时候已经天黑，三十几公里的山路开了1个多小时。
结果山顶满满都是人，好不容易找了个几角旮旯调头，被这人山人海吓怕了，掉头下山。
结果下山没多远就发现一个面东的平台，居然没人。所以收拾收拾打算在这儿过夜（对，就是在车里过夜）。
抬头就是在云雾间忽隐忽现的半月，光太亮，找不到星星。
索性放弃，收拾收拾打算睡觉，可以一早看日出～
结果。。。半夜被冻醒。。。我穿着羽绒服穿着外套穿着长裤还裹着毛毯，还是被冻醒。。。
恍惚中发现车窗外的半月不见了，但外面还有星星点点的光，而且有点像。。。猎户座？！
毫无犹豫穿鞋下车，果然
隐约可见的银河，东西贯穿
中间的猎户座清晰可见
之前的云朵不知道被吹去了哪儿
风依然很大
山顶的光已熄灭
偶尔还有车辆沿着山路甩着光柱上山
满眼的星辰璀璨异常
不禁想起The Wanted的那首Glad you came：
 The sun goes down, The stars come out
And all that counts Is here and now
My universe will never be the same
I&amp;rsquo;m glad you came&amp;hellip;
 要不是冻得发抖，恨不得可以盯着这篇光华一直看下去
可惜爪机不给力，照片就算了。。。
回到车上已是凌晨3点多
昏昏沉沉又睡了过去
睡梦中隐约开始回想到底多久没有看到这么多星星
又想到满月时群星的暗淡
突然意识到
 其实白天也好，黑夜也好，星星都在那里
白天看不到，因为太阳太耀眼；夜晚看不清，因为月亮及灯光太耀眼。
 就这样迷迷糊糊就睡着了
早上醒来看到外面雾气一片，日出是没希望了
爬起来出去发现风依旧的大
大片的云海在山间翻滚着前行
在缝隙中可以偶尔看到对面山上的风电机组
快速的旋转着
忽隐忽现
盯着发会呆，念及还要继续赶路，动身启程
下山时路要好走的多（因为上山的车在这个时间段很少）
而且也经过那些晚上错过的，连绵的竹林、涓涓小溪（对，我洗了脸）、下山赶集的老农。。。</description>
    </item>
    
    <item>
      <title>Ghost修改圆框logo</title>
      <link>/posts/optimize-layout-of-ghost-logo/</link>
      <pubDate>Tue, 30 Sep 2014 04:22:52 +0000</pubDate>
      
      <guid>/posts/optimize-layout-of-ghost-logo/</guid>
      <description>我一直觉得Casper主题（就是默认的！LOL~）什么都不错，就是logo位置如果可以居中。。然后可以做一个圆形的效果。。。 就更好啦～～～
找了一个有类似实现的主题（ichi），对比了一下css（其实是搜了一下&amp;rdquo;logo&amp;rdquo;的css不同），然后用下面的方式解决：
.blog-logo img { width: 100px; height: 100px; border: 2px solid white; -webkit-border-radius: 100px; -moz-border-radius: 100px; -ms-border-radius: 100px; -o-border-radius: 100px; border-radius: 100px; }  替换完以后瞬间高大上了～
试一下分辨率发现几个小问题，把assets/css/screen.css中对应blog-logo的其他项清(delete)一下～
为了居中的话，修改blog-logo的float：left改为center即可
至于位置的话，修改index.hbs就可以了（把blog-logo移到page-title前面即可～）
最后就是主页的效果啦～
Tada～</description>
    </item>
    
    <item>
      <title>关于比特币：老外纸笔演算比特币算法（转）</title>
      <link>/posts/about-bitcoin-calculate-algorithm-manually/</link>
      <pubDate>Tue, 30 Sep 2014 03:43:46 +0000</pubDate>
      
      <guid>/posts/about-bitcoin-calculate-algorithm-manually/</guid>
      <description>原文
手算。。。
你。。赢。。了。。</description>
    </item>
    
    <item>
      <title>关于FFmpeg（基础）</title>
      <link>/posts/about-ffmpeg-basic/</link>
      <pubDate>Mon, 29 Sep 2014 12:35:21 +0000</pubDate>
      
      <guid>/posts/about-ffmpeg-basic/</guid>
      <description>这篇title有点大，因为ffmpeg作为一个合格的多媒体框架，支持那么多codec和协议，一篇文章想写完，不现实。
不过本着本人不喜细节的一贯作风（不要在意这些细节！），所以就这么随便说说吧，当是个给自己的记录。
（下文基本是自问自答的方式（原因在于我觉得这种风格蛮容易理解的））
####什么是FFmpeg？
这个太宽泛了，简单回答就是一个多媒体框架。什么是多媒体？一句话：但凡不是文字还具有表意的数据形式，都可以称之为多媒体。（不过，如果对多媒体真是一点概念都没有的话。。。建议还是出门左拐6块钱麻辣烫填饱肚子再说吧。。。）
 FFmpeg is the leading multimedia framework, able to decode, encode, transcode, mux, demux, stream, filter and play pretty much anything that humans and machines have created. It supports the most obscure ancient formats up to the cutting edge. No matter if they were designed by some standards committee, the community or a corporation.
FFmpeg是多媒体框架的领军人物，允许解码、编码、转码、Mux（觉得确实没有特别好的翻译）、Demux、stream（这里不是名词）、filter和播放各种文件。它还支持时至今日的绝大多数古老文件格式，即使那格式甚至都尚未成为标准。
 是不是听起来碉堡了。BUT有一点一定要了解的就是，FFmpeg的开源协议。
####听起来很棒，谁在用？
这个很难回答。。。
因为应用太广泛了，而且目前的FFmpeg版本（2.x）框架也更易于“组合”
所以更容易以不同的形式出现在你的周围。例如各种XX影音和XX视频等等。
####这么多，太棒了！那他们都开源了吧！
呵呵。
尽管LGPL已经比较宽泛，动态链接即可；
但是加上遵循GPL的X264这块烫手山芋，（其实还是有办法绕过的，在FFmpeg的开源协议有提到华丽的classpath exception）</description>
    </item>
    
    <item>
      <title>Ghost upgrade to 0.5.2</title>
      <link>/posts/ghost-upgrade-to-0-5-2/</link>
      <pubDate>Mon, 29 Sep 2014 02:22:45 +0000</pubDate>
      
      <guid>/posts/ghost-upgrade-to-0-5-2/</guid>
      <description>不小心看到更新了，所以就去更新了（确实有新功能，如侧边栏和主题图片等，默认模板的字体也有修改），结果掉到自己给自己挖的坑里面去了。。。（手贱是病不治不行啊。。。）
参考How to upgrade self-installed Ghost来升级即可。不过我又加上了修改fonts来源（通过sed），并修改excerpt（也是通过sed。。。）
由于Ghost用的sqlite是不加密的（还是因为我用的是dev版本？），所以sed替换的时候会把sqlite数据库（content/data/sqlite-dev）里面的数据一并替换掉（还记得我之前写过Ghost访问比Wordpress还慢？么？真是自掘坟墓啊）
结果启动Ghost就报sql corruption 500的错误。。。（这么“写”数据，基本的MD5校验都过不了啊）
真是一失足成千古恨啊。折腾了蛮久才发现是这个问题。 T_T
附上修改后的脚本，运行
sudo ./upgrade_ghost.sh TARGET_DIR_PATH ```即可： ```language-bash #stop all echo &#39;1. stop all -----------------&#39; forever stopall #download latest build echo &#39;2. download latest package -------------------&#39; rm ghost-latest.zip wget http://ghost.org/zip/ghost-latest.zip #rm core echo &#39;3. delete core dir ---------------&#39; rm -rf $1/core #unzip echo &#39;4. unzip and merge code ----------------&#39; unzip -uo ghost-latest.zip -d $1/ #install rm ghost-latest.zip cd $1/ echo &#39;5.</description>
    </item>
    
    <item>
      <title>关于Shellshock bash bug</title>
      <link>/posts/about-shellshock-bash-bug/</link>
      <pubDate>Fri, 26 Sep 2014 07:05:44 +0000</pubDate>
      
      <guid>/posts/about-shellshock-bash-bug/</guid>
      <description>“不小心”看到了shellshock bash bug
不明觉厉，按图索骥：
$env x=&#39;() { :;}; echo vulnerable&#39; bash -c &#39;echo this is a test&#39;   If you see the word &amp;ldquo;vulnerable&amp;rdquo; as an answer, your system is, well&amp;hellip; vulnerable.
 中枪。。。
立刻update+upgrade，再回过头看看到底啥情况：
 Your Bash shell is simply running more code after a function (the &amp;ldquo;() { :;};&amp;rdquo; part), and that shouldn&amp;rsquo;t be happening. The function is the &amp;ldquo;allowed&amp;rdquo; code, while everything after it is where the potentially &amp;ldquo;malicious&amp;rdquo; code could be installed.</description>
    </item>
    
    <item>
      <title>关于GPL</title>
      <link>/posts/about-gpl/</link>
      <pubDate>Wed, 24 Sep 2014 02:28:22 +0000</pubDate>
      
      <guid>/posts/about-gpl/</guid>
      <description>因为最近在做ffmpeg相关的东西，所以GPL/LGPL还是要了解一下的。
GPL的WIKI： GPL WIKI
FFmpeg主要代码遵循的是LGPL；简单来说，静态库调用的话必须同样遵循LGPL（被传染），而动态库调用就没关系：FFmpeg legal
 The following is a checklist for LGPL compliance when linking against the FFmpeg libraries. It is not the only way to comply with the license, but we think it is the easiest. There are also a few items that are not really related to LGPL compliance but are good ideas anyway.
1.Compile FFmpeg without &amp;ldquo;&amp;ndash;enable-gpl&amp;rdquo; and without &amp;ldquo;&amp;ndash;enable-nonfree&amp;rdquo;.
2.Use dynamic linking (on windows, this means linking to dlls) for linking with FFmpeg libraries.</description>
    </item>
    
    <item>
      <title>Ghost在首页显示图片而非摘要</title>
      <link>/posts/ghost-display-post-images-on-home-page/</link>
      <pubDate>Mon, 22 Sep 2014 04:07:00 +0000</pubDate>
      
      <guid>/posts/ghost-display-post-images-on-home-page/</guid>
      <description>我就拿默认的Casper来说事吧。
老版本应该参考Display Post Images on home page就够了。but我在目前的版本0.5.1中，index.hbs中没发现对应项。。。
看了一下，发现换地儿了，在./partials/loop.hbs里，把post-excerpt项如下修改即可～
&amp;lt;section class=&amp;quot;post-excerpt&amp;quot;&amp;gt; &amp;lt;p&amp;gt;{{content words=&amp;quot;30&amp;quot;}} &amp;lt;a class=&amp;quot;read-more&amp;quot; href=&amp;quot;{{url}}&amp;quot;&amp;gt;more &amp;amp;raquo;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;/section&amp;gt;  修改后接着restart ghost（*我用的forever， 随手写个shell重启所有ghost～ 简单易用O Yeah*）就好啦
最新版修改hbs后，貌似不用重启ghost就可以生效了～页面刷新即可～
Tada~
[更新 2015/1/6]
现在更新的版本可以直接使用{{image}}了，直接参考Display Post Images on home page即可 &amp;ndash; 这个页面更新啦～ 哈哈～</description>
    </item>
    
    <item>
      <title>指纹，想说爱你不容易...</title>
      <link>/posts/zhi-wen-xiang-shuo-ai-ni-bu-rong-yi/</link>
      <pubDate>Sat, 20 Sep 2014 11:31:48 +0000</pubDate>
      
      <guid>/posts/zhi-wen-xiang-shuo-ai-ni-bu-rong-yi/</guid>
      <description>iPhone6也没办法完美解决的问题啊。。。
还记得之前说过的Is fingerprint safe?</description>
    </item>
    
    <item>
      <title>阿里巴巴的狂欢</title>
      <link>/posts/a-li-ba-ba-de-kuang-huan/</link>
      <pubDate>Sat, 20 Sep 2014 02:42:15 +0000</pubDate>
      
      <guid>/posts/a-li-ba-ba-de-kuang-huan/</guid>
      <description>阿里巴巴的员工昨天high翻了吧。股价从原定发行价$68飙涨到$99，最后在$93收盘。
算一下当初如果以P6的2000RSU去了，按照$100的价格来算，4年就是$200,000，扣掉税也和￥700,000左右。看起来不错啊～哈哈～
但是，但是目前市值超百度和腾讯的总和，真的科学么？
mark一下，淡定看空。
2014/09/22更新： 在这几天铺天盖地的“跟踪新闻”中，看到一条神回复： &amp;gt;马云的客户是商家，马云第一是客户，第二是员工，第三是股东，始终没提消费者。
2014/09/23更新： 开盘跌3个点。收盘跌4个点。市值蒸发80个亿。卷完钱以后市值也就无所谓了 这个意思嘛？</description>
    </item>
    
    <item>
      <title>周星星最近被黑的不轻</title>
      <link>/posts/zhou-xing-chi/</link>
      <pubDate>Fri, 19 Sep 2014 14:03:38 +0000</pubDate>
      
      <guid>/posts/zhou-xing-chi/</guid>
      <description>直接跳到16：30秒吧。
然后又翻出了柴静采访他的视频（CCTV），再看一遍，依然唏嘘不已。</description>
    </item>
    
    <item>
      <title>Jenkins android 自动化编译的一些坑</title>
      <link>/posts/jenkins-android-auto-build-problems/</link>
      <pubDate>Fri, 19 Sep 2014 09:16:23 +0000</pubDate>
      
      <guid>/posts/jenkins-android-auto-build-problems/</guid>
      <description>Jenkins就是Hudson的元老们，对Oracle注册Hudson商标（Sun被吃了嘛）并且打算将其私有商业化表示不满后，另起炉灶的产物（所以和hudson不仅看起来像，连插件基本都通用。。。） 更具体的细节请移步Wiki
[本文非科普/教程贴，仅供尝试使用Jenkins/Hudson但遇到问题的同学们，填平几个脚下的坑。]
###基本教程：
直接安装运行install jenkins就可以了，然后访问localhost:8080就可以看到基本页面。
https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins+on+Ubuntu https://wiki.jenkins-ci.org/display/JENKINS/GMail
一般安装插件如下：
https://wiki.jenkins-ci.org/display/JENKINS/Ant+Plugin https://wiki.jenkins-ci.org/display/JENKINS/Android+Lint+Plugin https://wiki.jenkins-ci.org/display/JENKINS/Android+Emulator+Plugin http://wiki.hudson-ci.org/display/HUDSON/Subversion+Release+Manager
配置参考如下即可：
http://java.dzone.com/articles/automating-continuous https://wiki.jenkins-ci.org/display/JENKINS/Building+an+Android+app+and+test+project
###注意事项：
一般如上操作，就差不多可以去“build”了。但很可能是荆棘遍野的，这里罗列一些遇到的坑：
 多工程依赖 如工程A，有两个依赖的library工程B和C，这时候除了需要在工程A下面生成build.xml和project.properties，还需要在工程B和C下面同样生成（android update project）；然后编译的时候在Ant的Build File里面使用工程A的build.xml即可
 路径问题 如果出现明明project.properties里面有注明android.library.reference.1=xxx的依赖项，编译时依然找不到；请确认路径是../../xxx的格式而不是..\\..\\xxx的格式。（反斜杠不兼容）
 native库（.so）问题 如果出现库无法链接，或者没有打包到apk中的情况；请确认是否是target版本不对，目前android-20是存在一些问题的（例如安装后不能运行等。。。），暂不建议使用（2014/9/11）
 环境变量问题
如出现环境变量找不到，可以直接加在Ant的Properties里面，如：
sdk.dir=/xxx/xxx/xxx/sdk   签名问题   把key找个位置放好，然后在Ant的Properties里面加入：
key.store=/xxx/xxx/xxx.key key.alias=xxx key.store.password=xxx key.alias.password=xxx  提示空间不足
多次编译后如空间不足，最好将JENKINS_HOME（主要是改这个环境变量）迁移到其他盘（默认是/var/lib/jenkins）; 如果遇到了503的话，一般是权限不对，把新目录的owner改为jenkins:jenkins，权限改为755即可。
 多文件打包
不支持多个文件同时输出（除非有name上的关联，如**/*.apk这种），这里可以用shell命令来打包；如tar；这里可以使用全局变量方便命名，如$JOB_NAME或者$WORKSPACE等等，举个栗子：
cd $WORKSPACE/code/XXX/bin/ tar zcvf $JOB_NAME.tar.gz proguard/mapping.txt xxx.apk  最后Archive the artifaces填**/*.tar.gz就好了
 如何删除SVN的登录信息   登录服务器（界面上没找到修改的地方），Edit your HUDSON_HOME/hudson.scm.SubversionSCM.xml file and delete your /credentials/entry matching with your realm (and having your given username).</description>
    </item>
    
    <item>
      <title>Understanding node.js 瞎翻译</title>
      <link>/posts/understanding-node-js-xia-fan-yi/</link>
      <pubDate>Wed, 17 Sep 2014 05:21:54 +0000</pubDate>
      
      <guid>/posts/understanding-node-js-xia-fan-yi/</guid>
      <description>原文在此
结果翻译完了。。发现了译言
当初在挑用哪个platform的时候，为了了解啥是node.js，恰好看到了此文，觉得不错。所以翻译一下，加深下印象。（就当是免责声明吧）
我介绍给别人Node.js时，一般他们有两种反应；一种是马上“哦！我懂了！”，一种是“哦。。。到底啥玩意儿啊？”
如果你到现在还是后者，那先简单给你介绍一下：
 它一个命令行工具，下载tarball，编译然后安装即可； 可以直接在terminal中敲node my_app.js就跑起来一个Javascript的程序； Node里的JS是靠V8引擎（chrome为啥那么快？因为有V8）来解析执行的； Node提供了一套JavaScript的API来访问网络和文件系统；  “但是我可以用ruby、python、php、java等等一大坨工具来做一样甚至更多的事情啊”
对，你说的一点儿也没错！Node并不是万能钥匙。它只是一个工具，至少现在，它没办法完全替代你在用的常规工具。
“说重点！”
来了！Node非常适合一种情况：同时处理多个事情。你是否写过一些代码然后嘀咕“我希望可以并行的跑这些代码”？重点来了！在Node里，所有东西都是并行的，除了你的代码！
“啥？”
没错，everything runs in parallel, except your code. 要理解这句话，想象一下，你的代码是老大，而Node是小弟。
每天，小弟会叫醒嗜睡的老大（*这尼玛被砍死的节奏*），问他今天有没有啥事儿。老大就会给小弟一堆任务然后继续去睡觉了。小弟拿到任务就去找小小弟们分发任务并且开始愉快地干活了。
一旦某个小弟完成了任务，就会去给老大报告。老大每次只见一个小弟（秘密嘛）并听报告。有时候老大会再给小弟安排后续任务。
这样的生活多美好啊，小弟们并行的把所有事情都做完了，只要报告给老大一个结果就好了。 &amp;gt;注：以上显然只是一个简单隐约，毕竟在现实生活中很难找到“非阻塞”的例子。
“碉堡了！别扯淡了，上代码！！！”
额，来了！一个简单的node程序如下：
var fs = require(&#39;fs&#39;) , sys = require(&#39;sys&#39;); fs.readFile(&#39;treasure-chamber-report.txt&#39;, function(report) { sys.puts(&amp;quot;oh, look at all my money: &amp;quot;+report); }); fs.writeFile(&#39;letter-to-princess.txt&#39;, &#39;...&#39;, function() { sys.puts(&amp;quot;can&#39;t wait to hear back from her!&amp;quot;); });  代码里给了node两个任务，分别是读和写一个文件，然后sleep（睡觉。。。呵呵）。一旦node完成任务，就callback。但是每次只能有一个callback被执行（小弟报告要排队啊！）。前一个callback结束前，其他的必须排队。顺便说一句，callback被执行的顺序是不保证的。
“所以，我不用担心代码同时访问同一数据结构的问题？”
你说对了！那就是JavaScript单线程/事件循环设计的美妙所在！
“非常好，但是我为什么要用它？”
一个理由是，高效。在web应用中，响应时间一般是所有数据库查询的时间之和*【类似sum（Q1，Q2，Q3，Q4）】*。但是用了Node，可以马上同时执行所有查询，把响应时间降到和最慢的那次查询一样。【类似max（Q1，Q2，Q3，Q4）】
另一个原因是JavaScript。你可以用Node从浏览器一直跑到后端了。JavaScript一直在进步啊。尽管你以前一直在用python、ruby、java、php等等等等，你应该也用过一点点JS对嘛？
最后一个原因就是速度，V8在成为最快动态语言解析器的道路上越走越远（*原文楼下有人砸场子，说V8不是最快的，死忠粉速去喷！*）。我无法想象有任何一种语言有如此快的进步速度。另外，node的I/O非常轻巧，可以让你最大程度的利用系统I/O。</description>
    </item>
    
    <item>
      <title>Hexo&#43; !!!</title>
      <link>/posts/hexo/</link>
      <pubDate>Tue, 16 Sep 2014 12:12:41 +0000</pubDate>
      
      <guid>/posts/hexo/</guid>
      <description>当初设想过（说来也就是13年年初时候的事情，滑完雪觉得有这么一个东西得多方便啊）的玩意儿，Kickstarter上居然有了： Hexo+
Your browser does not support the video tag.  
Your browser does not support the video tag.  </description>
    </item>
    
    <item>
      <title>Ghost访问比Wordpress还慢？</title>
      <link>/posts/ghost-slower-than-wordpress/</link>
      <pubDate>Tue, 16 Sep 2014 07:49:08 +0000</pubDate>
      
      <guid>/posts/ghost-slower-than-wordpress/</guid>
      <description>可能么？回答是当然，不考虑极端情况和不同条件下的比较，目前就遇到了本站在某些情况下访问慢的情况。。。
这不科学啊，这是ghost啊！ 不是臃肿的Wordpress啊，何况还是直接nginx重定向的啊，不是apache啊！
抱着一丝对人生的怀疑，祭出大杀器fiddler： 额，访问google字库没反应了啊，然后看一下耗时（估计超时了吧）。。。果然，21S。。。
也不熟悉ghost，上服务器搜一下，结果所有的模板，甚至server都在用google字库。。。
T_T
这咋办。。。天朝大国服对此表示确实压力很大啊。。。
~~先mark，想想咋解决。[TODO] ~~
貌似也没特别好的解决方案啊，罗列几个可用的吧：
 直接comment掉font那行，结果是：（BTW,发现在ghost论坛有人提一样的问题，哈哈～how to disable fonts）  访问速度瞬间翻N倍（因为本来就是秒开才对的嘛） 字体全部变默认了。。。（废话）  不用google remote的font，全部cache在server上（我去，还是有人捷足先登啊ghost local fonts）：  访问速度保持翻N倍的节奏 但是第一次访问该页面，理论上速度不快哦，因为浏览器要下载字体 有点麻烦的是以后万一字体更新或者ghost更新。。。每次替换或者merge很无奈啊。  这问题大家都遇到，难道没有mirror站么？（还真有。。。这里默默给360点个赞360 CDN）  好处同2 缺点嘛。。。首先是安全方面，这个真不好说。再就是貌似从国外访问这个cdn的速度很扯淡。。。    现在暂时用方案3，以后应该会改成方案2。LOL~
至于方案3，主题多的话总不能一个一个替换过去吧，那得累死啊。直接SSH上去，两句话（2014/09/29更新，参见Ghost upgrade to 0.5.2）命令：
sed -i &amp;quot;s/fonts.googleapis.com/fonts.useso.com/g&amp;quot; `grep fonts.googleapis.com -rl ./content/themes/` sed -i &amp;quot;s/fonts.googleapis.com/fonts.useso.com/g&amp;quot; `grep fonts.googleapis.com -rl ./core/server/views/`  Tada~</description>
    </item>
    
    <item>
      <title>从Wordpress迁移到Ghost</title>
      <link>/posts/from-wordpress-to-ghost/</link>
      <pubDate>Sun, 14 Sep 2014 16:27:10 +0000</pubDate>
      
      <guid>/posts/from-wordpress-to-ghost/</guid>
      <description>纠结了很久，一开始考虑是不是折腾一下jekyll（毕竟有github撑腰不断更新）；或者成熟一些的octopress；亦或者是台湾同胞的hexo；不过最后还是选择了Ghost
不想用WP的原因说白了就是。。。那玩意儿不太像是码农用的啊。。。（速度太慢体积太大不容易迁移这些明摆着的事情就不讨论了吧～）
不用Jekyll和octopress的原因其就是太麻烦了，想象一下，应该需要一个online的编辑器（而且算是比较好的选择了吧），然后用github（方便些）或者自己开一个shell去commit &amp;amp; generate
不用hexo的原因是，既然都已经上node.js了，干脆找个靠谱点的好了啊。
另外最后选择ghost还是看到了一篇老外的文章，也是面临类似的选择，其中一句话我觉得很对： &amp;gt;I chose Ghost over Jekyll because I wanted to minimize the amount of work spent on the blog outside of writing actual content. Quote
说的很对！
这次迁移中遇到了不少问题，因为没有什么好的工具可以从wordpress无缝迁移到ghost
尽管有一个ghost的wp插件，可以export content成json形式（然后在/ghost/debug页面可以去import），但是，这玩意儿真没那么好用。
迁移的时候有以下几个坑要注意：
 Slug是中文的（转码后是%E6%88这种），是无法导入ghost的，必须用英文或拼音代替（目测没有好工具。。。） ghost是没有分类（category）的，只有tag；所以WP的分类都会被转为tag的形式。 上传到wp的图片，一般是放在/wp-content/uploads/；ghost的话，一般是放置在/content/images/；找文本替换工具来替换吧，然后把图片copy过去就好了。 ghost没有像wp一样自动生成小尺寸的预览图，而是提供原图，所以页面上如果有很多图，那就真的是多图杀猫了。。。 html形式的高亮/斜体/颜色/超链接等等，都可以识别，但为了统一（其实是简化），最好还是改成markdown的形式 上传到wp的文件，例如xx.zip或者xx.pdf这一类的，ghost是玩不转的，需要自行处理。 模板一般放置在/content/theme/，自己下载解压缩后重启ghost即可使用了。不过免费的模板的质量确实不敢恭维啊。。。 ghost默认start的是development模式，而不是production模式；  有遗漏再补充，暂时就这些。</description>
    </item>
    
    <item>
      <title>Wordpress插入代码失效</title>
      <link>/posts/wordpress-cha-ru-dai-ma-shi-xiao/</link>
      <pubDate>Sat, 06 Sep 2014 12:30:36 +0000</pubDate>
      
      <guid>/posts/wordpress-cha-ru-dai-ma-shi-xiao/</guid>
      <description>貌似Wordpress自带的[xml]&amp;lt;code&amp;gt;[/xml]标签很弱啊。。。面对html的小箭头压力很大啊。。。 选择一个靠谱的插件吧，例如SyntaxHighlighter～
插入代码无压力：
PHP： &amp;gt;[php]phpinfo();[/php]
HTML： &amp;gt;[xml]&amp;lt;code&amp;gt;我是代码&amp;lt;/code&amp;gt;&amp;lt;a&amp;gt;我是链接&amp;lt;/a&amp;gt;[/xml]
Tada~</description>
    </item>
    
    <item>
      <title>Wordpress插入链接无效或者不显示标题</title>
      <link>/posts/wordpress-cha-ru-lian-jie-wu-xiao-huo-zhe-bu-xian-shi-biao-ti/</link>
      <pubDate>Sat, 06 Sep 2014 11:51:57 +0000</pubDate>
      
      <guid>/posts/wordpress-cha-ru-lian-jie-wu-xiao-huo-zhe-bu-xian-shi-biao-ti/</guid>
      <description>刚刚。。遇到了使用link插入链接后页面不显示，或者明明写了链接的标题但是显示的还是url的问题。。。 看了下代码，发现貌似html代码不太对：
现在用link标签插入的link如下：
&amp;lt;a title=&amp;quot;本文啊本文&amp;quot; href=&amp;quot;https://xxxx/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;  正常的link应该如下：
&amp;lt;a title=&amp;quot;本文啊本文&amp;quot; href=&amp;quot;https://xxxx/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;本文啊本文&amp;lt;/a&amp;gt;  注意&amp;lt;a&amp;gt;&amp;lt;/a&amp;gt;之间的标题哦，更新一下～ Tada～ 链接好啦～ （难道是升级版本搞出来的问题。。？懒得管啦～）</description>
    </item>
    
    <item>
      <title>说说前段时间闹得很凶的“手机超级病毒”</title>
      <link>/posts/shuo-shuo-qian-duan-shi-jian-nao-de-hen-xiong-de-shou-ji-chao-ji-bing-du/</link>
      <pubDate>Sat, 06 Sep 2014 11:25:36 +0000</pubDate>
      
      <guid>/posts/shuo-shuo-qian-duan-shi-jian-nao-de-hen-xiong-de-shou-ji-chao-ji-bing-du/</guid>
      <description>如手机超级病毒
之前的之前有public过一份源码，在开放信息间谍的全部源码并停止服务
那代码里面已经涵盖了对短信/通话记录/联系人的获取和上传等功能（甚至基站定位的代码都有。。。），换言之，直接拿这源码改几行代码就可以完成那个所谓的“手机超级病毒”鸟。（如果乐意，即使是生手，花一点点时间也可以发布“病毒”了！）
这么一个low level用来忽悠忽悠抓小三的怨妇们的玩意儿，加了一个短信群发，居然被炒的如此火热。。。也许是那段时间没新闻了所以硬要拉点头条出来吧。。。
对于那些在这件事情上说“you can you up, no can no BB”的人，我要说一声，“我有代码，你上吧。”</description>
    </item>
    
    <item>
      <title>WP新版本如何切换语言到中文</title>
      <link>/posts/wp-xin-ban-ben-ru-he-qie-huan-yu-yan-dao-zhong-wen/</link>
      <pubDate>Fri, 05 Sep 2014 22:08:36 +0000</pubDate>
      
      <guid>/posts/wp-xin-ban-ben-ru-he-qie-huan-yu-yan-dao-zhong-wen/</guid>
      <description>WP新版本，自3.X（X貌似大于8吧）以后，直接修改wp-config.php里面的WPLANG就没有效果了。。。算是出于对用户体验的考虑，不过你们太不考虑非英语为母语国家的用户了吧。。。
现在的切换方式和之前相比，多了一步：
 修改wp-config.php中的WPLANG为目标语言，例如中文zh_CN 进入setting，会发现最下面多了一个设置项：（这就是那多出来的一步，曾经的曾经，这个选项也是存在的。。。） 果断选择语言（其实就多了一个对应的“中文”而已），然后老样子，去Update刷新一下就好啦～  Tada～</description>
    </item>
    
    <item>
      <title>再一次的选择</title>
      <link>/posts/zai-yi-ci-de-xuan-ze/</link>
      <pubDate>Thu, 27 Mar 2014 23:22:09 +0000</pubDate>
      
      <guid>/posts/zai-yi-ci-de-xuan-ze/</guid>
      <description>X通 阿X X山  三个没啥交集的公司，分别给了我offer； 倒也没有受宠若惊，反而是对arc更加失望透顶。。。
为了避免本文变成对arc的吐槽贴，就此打住。简单记录一下我在这3个offer中间的选择。
先列出来：（*最敏感的薪资以xN来处理*）
 X通： [Senior engineer]
 13薪，工资4N/月（共14%的公积金完全由公司缴纳）； 1000+/月的额外津贴； 2个月的安家费； $16500（每年$5500）的股票；另外还有以15%月工资按照85%的市面价购买股票的机会（每年两次时间窗，半年一次，相当于每次至少赚工资的13.5%）； 每年两次考评，一般会有1个月的工资作为奖金； 工作地点上海 工作内容依然是之前的底层Camera驱动部分（其实是AP部分），偏FAE。  阿X： [P6]
 13薪（一般可以是16个月），工资3.6N/月； 福利不明（因为阿X很奇怪，管工资的HR不管福利，所以不知道具体啥情况）； 2000股的RSU（分4年兑现（0/50/25/25），目前市值已经达到了$60/股，算下来约合￥60W，每年差不多15W，扣除45%的税，也有8W多现金进账。）； 考评，分3/6/1等（3的部分为大于3个月的奖金，6的部分为3个月的奖金）； 工作地点杭州淘宝城 工作内容为在OS事业群（非强制996，相比较无线要轻松的多）做智能电视，机顶盒等， 纯开发。  X山： [Senior engineer]
 13薪，工资4N/月； 500+/月的额外津贴； 无股票； 根据年终考评可以拿到3-8个月不等的奖金； 工作地点杭州文三路 工作内容为视频编解码方向， 偏管理（工作量本身也比前两个要少）。   其实算下来，第一年，X通收入最多；算上公积金，到手可以到￥31W； 第二年的话阿X就追上来了。 之后都是阿X靠RSU遥遥领先。
所以从钱的角度而言，我应该pass X山。
但是这恰恰不单单是钱的问题。目前怎么说也算工作了快6年的人了。 再动，也不想单纯的去做个开发。 就算做开发，也不想做那么碌碌无为的开发。
所以，我就pass掉阿X了。
再考虑，就是工作地点的问题；首先是我现在去上海，其实算是几乎从0开始（之前不管是南京还是杭州，多少还认识点儿人，但上海就真的可以说是屈指可数了。。。） 更关键的是考虑到某位的性格和情况，我觉得还是待在身边，比较好。
而且换个角度，就工作内容而言，FAE并不是我期望的方向，我一直想做一个实打实面向终端消费者的产品，而不是为了不同的厂商定制来定制去。
所以，我也pass了X通。
最后选择了X山。 &amp;mdash; 说实话我真的不知道以后会不会后悔，但是没有走过，谁知道那。
我清晰的记得我拒绝掉阿X的时候不带一丝留恋，我说不好意思我不想去阿X。
我也很清晰的记得我拒绝掉X通的时候内心满满的失落，我说我真的非常非常期待这个机会但是也真的真的不能去。。。
诚如我今天对arc的hr老谢说的一样，我说我知道公司有很多机会，但是不管我接受哪个，都是在被“另一种程度上的”牵着走，并不是出于我的本意，所以我想离开arc，我想让我自己换个地方，看看我自己到底想要什么，再去主动的追求。
一次又一次的选择，也许我偏离了本来的道路，但我希望，*我可以越走越远，可以越来越强大，可以知道自己真的想要什么*。让时间来见证这一切吧。</description>
    </item>
    
    <item>
      <title>纪念在高通奋战的一年</title>
      <link>/posts/when-i-am-at-qualcomm/</link>
      <pubDate>Mon, 24 Mar 2014 13:45:03 +0000</pubDate>
      
      <guid>/posts/when-i-am-at-qualcomm/</guid>
      <description>对，我用了奋战这个词。而且用了这么传（S）统（B）的标题。。。
不管从什么角度，高通（对，就是那个Qualcomm）的camera团队，在过去的一年，都不能算顺风顺水。 而作为consultant（就是外包）的我们磕磕绊绊的走过来，一点儿也不容易。
去年4月份到6月份待在韩国水原，大战棒子；在三星奋战到次日下午才回宾馆睡觉，然后午夜0点再杀进去的疯狂至今历历在目～～
然后6月底到7月中旬，有幸去大美帝逍（ku）遥（bi）了三周；路过旧金山、去了圣迭戈、体验了在美帝加班到深夜后的四下无人黑灯瞎火、也看到了美国人民休闲自得的周末生活（羡慕嫉妒恨。。。）、参加了海边华丽的team-building、逛了westfield、也扫荡了outlets、打了枪、看了脱衣舞、回来路过韩国（廉价机票）还逛了一天首尔明洞、也算圆满了。
这一路认识了
 Jeff（camera的leader）（当然Jeff被棒子指着鼻子责备的样子也记忆犹新～ 哈哈～） Mingcheng（清华教过书） Marvin（笑看人生坎坷的“相声演员”） Kevin（香港高考状元） Jack（吃喝嫖赌抽的80后） Rama（一个极为搞笑的老印） Jeremy（住在“江南”的花美男） Sree、JP &amp;amp; Hody（Sensor部门的三巨头）等一众猛人。  接下来因为种种原因，无法再有机会出国鸟；就在上海瞬联的office待（dai）了两个月。巩固了基础知识。
彼时的上海晴空碧日，甚至不逊美帝。那时晚上吃着龙虾喝着啤酒（作死么）瞎扯淡吃空饷的日子也许就这么一去不复返了@FengShouhu。
然后就到了9月份，正式的任务终于下来了，全体转战北京，通宵达旦的奋战到10月中旬（我会告诉你们我十一还去了川西转了一圈结识了*珊姐/小牦牛/小超超*么～？），K910项目顺利结束，也第一次，证明了我们的存在价值。。。着实不易。
接下来11月份上海支持ZTE（A21项目），12月份北京支持SoMC（sony中国移动研发部门，Tianchi项目），然后1月初跑去深圳/东莞支持BBK（XPlay 3s）和OPPO（Find 7）直到过年。
也结识了强大的CE，如Xiaocheng、Jiale，以及Jeff,Gan、YiHe、Kai等～
再比如三大金刚（Su，Wenbin &amp;amp; Ju）及不倒翁（Guoquan）
太多太多，真诚的，谢谢你们。
除了华为（人家用海思。。。），小米（本身software有猛人），宇龙（没轮到），和没啥software改动的JSR（貌似是这个缩写吧），国内有点名气的手机厂商算是转遍了；混了不少名片，也混了不少“后路”。
这一年过得匆匆，不敢说跑遍了大江南北，但也算去了不少地方；
这是学习的一年，是进步成长的一年，是难得人生阅历无限提高的一年；
这里我必须要发自内心的谢谢这一路陪伴我成长的人们；因为你们，让我在迷茫不知所措的那段日子，看到了前进的方向，意识到了自己的自满和渺小，让我才得以历此磨练，得以战斗到今天。
谢谢你们。
附上给高通的Farewell: (看到大家的回复还是会情不自禁啊T_T)
Hi All,
I’m afraid it’s time to say goodbye. As some of you probably already know, I will quit from Arc, and I do not goto Shanghai either… (I’m really, really, really sorry for that because of personal reasons… T_T )</description>
    </item>
    
    <item>
      <title>选择</title>
      <link>/posts/xuan-ze/</link>
      <pubDate>Fri, 14 Feb 2014 17:21:17 +0000</pubDate>
      
      <guid>/posts/xuan-ze/</guid>
      <description>苏格拉底说过，人不可能两次踏入同一条河流。 所以我们没办法确定自己做的选择是不是一定正确。 因为我们永远不知道另外的选择里面，打开后会有什么样的小秘密跳出来。
今天XX8电话我，开到了30W的年薪+3W股（目前市值15W）的期权。但我还是婉拒了。
正如昨天另外一个猎头公司的头问我为什么拒绝了X趣一样（X趣开出的价码是25W年薪+2K股期权）
前者看起来真的很诱人，而且工作地点就在杭州，可以多陪陪某同学。
不过换个角度而言，不管是去XX8/X趣也好，去X通/X想也好，都是在打工；无非是前者可能有翻倍获得收益的机会（例如期权），后者更稳定而已。 都不能和创业（或者自己捣鼓的小玩意儿）相比。
与其默默打工，*不如在这个略显尴尬的年龄，尝试看看是不是自己可以做点事情*。我这句话对猎头和对方HR都说过。因为有些事情，现在不去做，以后就都不会去做了。
在我24岁的时候才开始玩滑板/旱冰，25岁才开始滑雪；我很想把一些以前没去做的事情，好好的做一遍，算是对过往自己的一个小小弥补。 但是也清楚，过去的就过去了。 回不去的。
所以这次我想试试看，试试组建自己的团队看看， 看看大家是不是可以通力合作，做出点东西来。 并以此为契机，开始创业。（更新一下，前team大浪淘沙，算散伙了吧）
*其实每一次选择都无法回头*，无非是变化大或者小， 我也没期望这次一定成功，但是没有试过，谁知道结果那。
人生太短暂，只做自己。
Life is too short to be anyone else.</description>
    </item>
    
    <item>
      <title>About 96123.com</title>
      <link>/posts/about-96123-com/</link>
      <pubDate>Sat, 25 Jan 2014 21:27:17 +0000</pubDate>
      
      <guid>/posts/about-96123-com/</guid>
      <description>http://www.96123.com/member-dingdan.aspx 页面有很多问题。 最简单的。。 就是对订单的查询没有任何的身份验证措施，你可以随意访问目前的订单。 例如你可以访问：http://www.96123.com/member-jilu.aspx?id=9886 也可以访问：http://www.96123.com/member-jilu.aspx?id=9887
轻松遍历所有订单。
至于注入之类的。。 这种级别的身份验证措施。。我就不说了吧。
翻了一下代码，貌似是2010年的。。。
管理界面可能是：http://www.96123.com/login.aspx
界面风格相当粗糙啊。。。
不给力啊。</description>
    </item>
    
    <item>
      <title>没有完美</title>
      <link>/posts/mei-you-wan-mei/</link>
      <pubDate>Sat, 18 Jan 2014 18:20:02 +0000</pubDate>
      
      <guid>/posts/mei-you-wan-mei/</guid>
      <description>如果你最近有稍微关注一下支付宝的新闻，你会看到如下连续的三篇： [惊悚实验]支付宝关联了银行卡 如果手机丢了会发生什么 [多图]支付宝找回密码验身份证被指依然可以绕过 [多图]捡到手机 除了支付宝你还可以干点什么?
我们不去讨论为什么这三篇文章如此集中（这还用说嘛，TX要推自己的“XX宝”了，当然要打压对手一下～） 但是这里可以看到，都集中在获取手机后如何如何去做坏事，彰显手机的强大，鄙视了支付宝等各大站点在安全上对手机的过分依赖。 说白了，就是拿到了手机，就仿佛获得了原机主的最高权限～～ （我想说句废话，手机里面那么多秘密，给你看到了还不疯掉！支付宝在这种case下算个P啊！）
不过我们换个角度想想看，为什么支付宝会有这种“漏洞”。 支付宝最关注的是什么？ 一定是安全。 一个绝对靠谱的安全是什么样子？ 就像之前密码和指纹 哪个身份识别方式更安全？里面说的，各种复杂的多重验证；而且密码恢复的手段都是反人类不科学到听了都吐血的。《白宫陷落》看过没？地狱犬系统还记得吧？ 况且，假设真做到那种程度，支付宝还有人用么？ 想象一下，想给手机充个值，结果需要3个不同的动态密钥，还要一个放在邮箱，一个发到手机，一个用脑子记住，而且强制3个月必须更换！想找回密码，必须本人亲自去杭州支付宝总部，带上身份证/户口本/当地派出所出具的证明函/单身证明或已婚证明等等等等，还有要记得排队取号哦亲～ 但如果那样的话，大家还有必要用支付宝么～？
所以我们来看支付宝另外需要密切关注的点，也就是方便（用户体验） 如果支付宝用起来不方便，大家就没必要用支付宝了；就好像去吃KFC，一样的套餐，你是在家门口的KFC吃或者叫外卖吃？还是坐飞机跑到北上广深的市中心去吃？（如果你选择了后者。。。亲请出门左转不送） 所以支付宝必须在安全和方便之间做权衡，这也是题目的意思，没有完美的逻辑；没有安全到极限又无比方便的方案，这不管是从统计学还是上升到哲学高度都是说不通的。 不同的互联网公司会做不同的权衡，支付宝选择手机-号码作为一个核心的依赖项，应该是出于以下两点的考虑： 1. “手机”是贴身方便的个人物品 2. “号码”是运营商提供的，而运营商是靠谱的（至少比三方机构靠谱吧） &amp;ndash; 这里请忽略2G假基站的影响，谢谢。 当然如果亲觉得这种依赖是个弊端，那请问有什么“更好”的方案么～？
那如何避免出现类似支付宝这种的损失？ 我想说，这个大家都会，而且可能有些人已经做过了，而且。。有些人可能做过不止一次。。。 1. 手机应该已经加密过，至少应该有开启“设备管理器”或类似的远程销毁数据的功能（没这些就算了，大家等着亲的艳照门哦～） 2. 手机号码第一时间挂失补办新卡（重要啊！！）
插句其他的 &amp;ndash; WordPress的新升级感觉不错嘛～</description>
    </item>
    
    <item>
      <title>关于比特币，从交易平台盈利继续说（II）</title>
      <link>/posts/guan-yu-bi-te-bi-cong-jiao-yi-ping-tai-ying-li-ji-xu-shuo-ii/</link>
      <pubDate>Wed, 04 Dec 2013 23:35:18 +0000</pubDate>
      
      <guid>/posts/guan-yu-bi-te-bi-cong-jiao-yi-ping-tai-ying-li-ji-xu-shuo-ii/</guid>
      <description>比特币也好，莱特币也好，既然号称货币（如果的话），那就一定需要具备流通性。
目前来说，屈指可数的几个可以用比特币支付商品，一般也是噱头大于实际操作价值。
真正在大量流通这些比特币的地方，还是各大交易平台。
国内数得着的，就是btcchina，okcoin
国外就是mtgox，BTC-E
当然还有一些鱼龙混杂才崛起没多久新生平台，这就不举例了。
难道不觉得奇怪么？为什么可以用来实际支付的商品少的可怜，而交易平台却多如牛毛？
抱着这个疑问，我稍微看了一下okcoin（其他平台类似） 以okcoin为例，在过去的24小时里，成交量如下：
BTC：40938.47฿ LTC: 4544376.94Ł
按照均价6000的BTC和200的LTC来算，再抹掉零头，24小时内的流通金额达到了惊人的：1154503200元，是不是有点长？
我们就按照11亿来计算（五千万被抹掉了。。。），价格交易平台手机收取哪怕万分之一的手续费（但是据我说知，不少交易平台的交易费是0.2%甚至更高，这意味着什么捏～ 例如过去24小时内交易LTC在30W+，BTC在2W+的FXBTC～ ），24小时内进账就会超过11W，月均进账可以轻松超过300W。
对于这些几乎没有建站难度，三天两天遭遇DDOS攻击就崩溃半天的交易平台来说，这绝对是空手套白狼的大金库。
不过话说回来，你相信一天会有11亿流动资金在这样的一个交易平台内滚动么？ 显然不可能嘛，保守估计应该千万级是有可能的～
再想深入一点，你相信日均交易量会这么大么？ 都是实际交易么？ 你可能会说有大庄家～ 我承认肯定有大庄家～ 但是。。。我们考虑一下目前来看的最大受益者～ 你还觉得只是庄家操盘这么简单么～
当然前面是有一个小bug的， okcoin和btcchina都号称免除交易手续费 那怎么赚钱那？
首先btcchina早就获得百万美元级别的风投了，而okcoin，创立之初就是风投百万起来的。所以他们都不存在运营资金短缺的问题。
另外先不说他们是不是会走积累用户量以后做大做强这条路，但至少，他们以平台级别进行操盘来获取收益，是件易如反掌的事情。（这就比较黑幕了，因为交易平台的存在，会使用大量中间钱包，导致了通过全局唯一的交易表，很难明确货币大致流向和趋势）
小站收税揽财（各种手续费），大站烧钱拼量（控盘）。 不管哪个领域都是这样开始的吧。
BTW大家还记得之前的GBL么？就那个卷款还卷大量比特币跑路的那个站，我说既然厚着脸皮卷款跑路了，钱追回来问题不大，但是那些存进去的BTC，是可以100%的肯定被黑掉了。 （因为这个交易记录就像某位同学丢到垃圾桶的硬盘里的记录一样，只要放的位置好，别人永远找不到。） GBL的这些同学是在赌以后比特币肯定升值么？ 先捂着？ OK，祝你们好运～
BTW，不管是哪个交易平台，都没有任何的监管措施（谁会自己砸自己脚啊），所以自买自卖，自抬自价的现象非常普遍
最后，入市有风险，投资需谨慎。</description>
    </item>
    
    <item>
      <title>关于比特币,从51%攻击说开了去 （I）</title>
      <link>/posts/guan-yu-bi-te-bi-cong-51-gong-ji-shuo-kai-le-qu-i/</link>
      <pubDate>Sun, 01 Dec 2013 13:58:00 +0000</pubDate>
      
      <guid>/posts/guan-yu-bi-te-bi-cong-51-gong-ji-shuo-kai-le-qu-i/</guid>
      <description>最近比特币火爆到不行，讨论这玩意儿值不值钱无疑都是被喷的节奏，而且讨论这种话题也显然不是我的套路。 还是说说怎么攻击比较靠谱～
首先不管是比特币（bitcoin）还是莱特比（litecoin），简单说就是一种“电子数据”（不好意思，我称之为数据而非货币，这样比较不会有争议。）
形式上略有差别，但也就是一段“人类无法识别”的字符串。
不管是哪种“比特币”，都是有一个全局的交易记录来共同维护的（这也是所谓去中心化的核心思想）。
换言之，从它诞生之初的第一笔“交易”到最新的一笔“交易”，以及一个币从被“挖掘”出来后的所有的“交易”操作，所有人，都是可以同步到并查询到的。同时因为每次“交易”都需要广播告诉所有人（P2P），得到大家的普遍（50%以上）认可后才会被接受，所以这里没有假币这个概念。
而所谓“交易”，或者说“比特币”的“流通”本身，其实就是广播出去，说A的多少多少“比特币”给予B了。等到下一次交易记录表更新的时候，这笔记录如果在上面，就说明成功了“流通”了。
好吧，所谓51%攻击就是卡在一个算法基于全网大部分认可的基础上，简单说，如果算力够强，就可以伪造“流通”记录。 当然那几乎不可能，因为从目前几个矿机制造商的算力来看，想超越他们？（当然如果你有办法把银河拉出来，那就另说了～） 所以必须还有其他的攻击方式，例如前段时间被DDOS的某站。 用DDOS攻击还修改记录，听起来有点不可思议吧，一直以为DDOS只是用来宕机的各位可以醒醒了。 其实针对这种依赖P2P记录来确定交易成功与否的方式，向交易平台发大量伪造的报文就好了。只要打得交易平台接受了，那也就没必要和所谓51%的全网算力较劲了。
说到这里是不是立刻有豁然开朗的感觉？ 当然我只是信口开河一下，具体操作的话。。。
呵呵～～
BTW，比特币能不能赚钱这种问题。。 呵呵呵呵～～～～</description>
    </item>
    
    <item>
      <title>is fingerprint safe?</title>
      <link>/posts/is-fingerprint-safe/</link>
      <pubDate>Mon, 23 Sep 2013 16:18:13 +0000</pubDate>
      
      <guid>/posts/is-fingerprint-safe/</guid>
      <description>Eh.. it&amp;rsquo;s hard to say&amp;hellip;
You can review my another article here: 密码和指纹-哪个身份识别方式更安全？
And before my trying&amp;hellip; someone hacked already&amp;hellip;
[视频]黑客称已成功绕过苹果iPhone 5s指纹识别系统</description>
    </item>
    
    <item>
      <title>Be care of the Byte Alignment in Type Cast.</title>
      <link>/posts/be-care-of-the-byte-alignment-in-type-cast/</link>
      <pubDate>Sat, 24 Aug 2013 21:31:11 +0000</pubDate>
      
      <guid>/posts/be-care-of-the-byte-alignment-in-type-cast/</guid>
      <description>Be care of the Byte Alignment in Type Cast.
For example, if you have one buffer(void*) with data follow this structure:
typedef struct { uint8_t a; uint8_t b; uint32_t c; } xxx_t  Normally, it needs 6 bytes per data, right? But, actually, when you did type cast, like (xxx_t*)buffer the data will be totally wrong (probably a and b is right, but c is holy shit).
The root cause, is Byte alignment.</description>
    </item>
    
    <item>
      <title>无节操的电信团购站</title>
      <link>/posts/wu-jie-cao-de-dian-xin-tuan-gou-zhan/</link>
      <pubDate>Mon, 12 Aug 2013 10:50:24 +0000</pubDate>
      
      <guid>/posts/wu-jie-cao-de-dian-xin-tuan-gou-zhan/</guid>
      <description>如果你如我好友一样，是悲催的电信用户，终日挑机而不得，那你可能听过一个福音站点：貌似已失效了
这是电信旗下的官方手机团购站，你初登上去可能觉得不以为然，没啥便宜货在团购，尤其是目前处于打广告状态的P6，就便宜了100块，还没电商便宜。。。
但是如果你看过下面这几个团购信息（已经过期了）。。。
这个折扣力度只能说“给力”是吧～
这个可以算“BUG”了吧～
这个。。。我觉得绝对是逆天了！
现在你就知道了，这个站绝对是深藏不露杀人砍价发放福利于无形！
好吧，为了为好友谋求同等福利，终于左等右等等到了1400的HTC C620D
图就不上了，因为风头都被上面的IP4S抢掉了。。。
但是这个抢购比较恶心啊，要跳转若干个页面，一般情况下分秒钟的事情怎么能等那么久那！
所以看了看这个站的一些跳转逻辑，发现了一个明显的BUG。。。
似乎可以在团购开始之前，直接通过如下链接进到对应的团购结算页（请务必登录进去以后再看～）：
 http://tuan.hicdma.com/views/pages/bulk/bulkOrder.jsp?bulkId=1386&amp;amp;buyNum=1
 看到了什么啊亲看到了什么！！！ 是不是逆天价的IP4S啊！！！ 但是千万别激动，这个就是诱惑诱惑亲的。。。因为肉眼可见，服务器端做了时间和数量的限制，所以购买不了。。。
那这个页面（修改bulkId来直接进入结算页）能干嘛那？
回答 ： 节省所有的跳转步骤，在那一秒瞬间下单（*其实简单改一下JS就可以开启刷新球了。。。*）！ &amp;ndash; 这样的秒中机会要大很多很多吧？
不过没有仔细研究到底限制是totally在服务器端做掉的，还是有一部分参数从client端走，暂时也没时间去研究。以后再说吧～
BTW，个人觉得，能考虑到在服务器端进行时间和数量这些关键限制的站点维护团队，怎么可能会留下这种这么低级的跳转bug？
莫非这团队故意留下这bug来给自己谋福利么。。。
那我就只能呵呵呵呵呵呵～
（that&amp;rsquo;s why I say&amp;hellip; 无节操&amp;hellip;）</description>
    </item>
    
    <item>
      <title>Cloud Atlas</title>
      <link>/posts/cloud-atlas/</link>
      <pubDate>Thu, 08 Aug 2013 11:42:17 +0000</pubDate>
      
      <guid>/posts/cloud-atlas/</guid>
      <description>不知道这两天才把《Cloud Atlas》看完会不会被BS。
主要就是讲了那么几个在各自时代玩逆天的人，
一个救人一命得到认可的黑奴/和被救一命便一意孤行的律师，争取人权的道路很漫长啊.其实我想问是不是某任美帝总统&amp;hellip;
一个搞基的顶级音乐家,因为搞基太超前,被当时的时代所不齿,自杀.
一个捅破石油巨头阴谋的记者,一路上走到哪死到哪,结果这位姐毫发无伤&amp;hellip;
一个逃离老人院的过气作家，逃离以后貌似就出名了&amp;hellip;电影还流传了很久&amp;hellip;
一个发表平等宣言的克隆人,依然是走到哪死到哪,被搞到高潮以后接着被拉去参观克隆人肉食品加工厂（这过程就不残暴了么&amp;hellip;）,最终捅破了政府对克隆人的残暴.被处决&amp;hellip;
一个克服内心恐惧的粗壮古人和一个面临绝种问题的窈窕先知（导演你这放一起是故意的吧？）,同样是走到哪死到哪.最终孕育了不知多少小baby，幸福指数爆表啊.
前后故事时空交错，居然还可以通过印记和音乐/录像来串联起来，可见各位都是被命运眷顾的人，一般不能死，真死了也一定会死的惊天动地。
所有这些被眷顾的角色，都在向各自所认可的前方不断前进，无视强权，压迫，社会主流。 是不是太专业了？好吧，其实就是非主流颠覆主流的故事。
原标题直译过来是云图，总觉得不明就里，重新查了一下，才知道Atlas另外的含义：“希腊神话中的大力神，因支持巨人族首领泰坦反对主神宙斯，被罚作苦役，用头和肩将天撑起”，另外也暗指身负重任的人。
瞬间豁然开朗。
BTW，大天朝此片没有引进吧？（that&amp;rsquo;s why I place this article under hack~ ）</description>
    </item>
    
    <item>
      <title>密码和指纹 哪个身份识别方式更安全？</title>
      <link>/posts/mi-ma-he-zhi-wen-na-ge-shen-fen-shi-bie-fang-shi-geng-an-quan/</link>
      <pubDate>Sat, 15 Jun 2013 18:36:42 +0000</pubDate>
      
      <guid>/posts/mi-ma-he-zhi-wen-na-ge-shen-fen-shi-bie-fang-shi-geng-an-quan/</guid>
      <description>当初入TP的时候，就有过这个思考，是不是要带指纹识别；
不过后来仔细想了一下，这会是一个很有意思的事情；
依稀记得之前有电影片段，是某个机密的场所，进门需要指纹+掌纹，结果若干反派人物就直接把那位有指纹同学的手给砍了下来，淡定的进门了。。。
这个片段一次一次的让我对于指纹识别抱有一定的戒心，因为那就好像在告诉别人，嘿，我这里有一些小秘密，但是只有我的手可以打开哦～
。。。
言归正传，这就需要先回到身份识别方式的选择上。
最原始的识别方式就是传统的文本型密码（再往前咱们就不追究了吧）
后来有了动态识别码，或者硬件辅助（U盾）的手段；
再后来有了人脸识别，指纹识别，等等。
但哪个更安全？恐怕没办法立刻下结论，这就要扯到密码学里面的一个概念 &amp;ndash; 相对安全性
不管多长的密码都只是相对安全的（其实指纹也好人脸识别也好，都可以抽象理解为一种密码）
无非是需要5分钟还是5000年才能“理论上”破译的差别，这就是相对安全；因为随着硬件性能的不断提高，当初认为是5000年才能破译的密码，可能现在只需要5分钟都不到就搞定了；同样，现在号称5000年才能破译的密码，在若干年后，随着计算能力的不断提高（尤其是更大规模更普及的云计算/分布式计算），指不定10年后就把这个在10年前认为需要5000年的计算量的事情在短短5分钟之内搞定了（当然这里说的略有夸张，毕竟5000年和5分钟相差了9个数量级）。
&amp;nbsp;
而密码的破译，或者说成功破译，几乎很少会依赖于计算能力，而更多的是依赖于 &amp;ndash; 方法（砍手就是一个不错的方法～）
对于纯文本型的传统密码，也许只有按键记录器或者“偷窥”会靠谱一些；
而动态识别码和U盾，你只要“偷”到了这个硬件，就搞定了；
至于人脸识别和指纹识别，就更简单了，直接拿照片或者复制一下指纹（透明胶带或者玻璃杯子即可）就可以了；至于因为拿照片就可以搞定解锁这件事情。。。google表示压力略大（[图]谷歌建议用户吐舌头、歪脖子 设置高安全性能面部解锁密码），毕竟android4.x系统有一个“给力”的功能就是人脸解锁。。。
所以看起来，似乎安全性上，是传统密码 &amp;gt; 动态识别码及U盾（你需要随身携带） &amp;gt; 人脸识别和指纹识别
而从“用户需要记录的数据量/使用简易程度”来看，传统密码&amp;gt; 动态识别码及U盾（你需要随身携带）&amp;gt; 人脸识别和指纹识别
这很有意思，因为似乎，用户体验越高，安全性就越差（less is more，really？）
那到底该选择哪一种？
这很难说，其实这是一个因人而异的问题；
如果用户是一个“所有密码都一样”的“纯粹”的人，那么他真心需要“非传统密码”的保护，因为从某个角度来说，即使是他的照片都要比他的传统密码安全。
如果用户是一个自我保护意识很强的“杞人”，那么还是传统密码更适合他，而且是需要分级（根据信息安全级别的不同来分级密码）的。毕竟天天担心着自己的手被别人砍掉是压力很大的～ 因为“杞人”认为，内在的“存储”要比外在的“皮肤”靠谱的多～
当然，最好的办法，其实各个银行的网银已经给出了答案，就是多次不同类型的验证。毕竟现在连outlook都开始支持二次验证了（google是最先全线支持的么？）
而至于我，说实话我其实是一个蛮“纯粹”的人～</description>
    </item>
    
    <item>
      <title>神州租车的数据安全问题[续](secure problem of ZuChe.com [End])</title>
      <link>/posts/shen-zhou-zu-che-de-shu-ju-an-quan-wen-ti-xu-secure-problem-of-zuche-com-end/</link>
      <pubDate>Fri, 14 Jun 2013 16:07:18 +0000</pubDate>
      
      <guid>/posts/shen-zhou-zu-che-de-shu-ju-an-quan-wen-ti-xu-secure-problem-of-zuche-com-end/</guid>
      <description>前文：神州租车的数据安全问题(secure problem of ZuChe.com)
说实话我还有傻乎乎的担心了一下我这么写出来会不会被社会报复的问题，后来想了想，本为无名小卒，何足大家挂齿，更何况我也不在国内，难不成还引渡么？（扯远了。。。）。遂继续写写，说说我对神州这个泄漏的一点看法。
这个leak的根源是：万能钥匙的问题（当然我才疏学浅，不知道这么说对不对），就是一把钥匙可以开N把锁；换言之，就是越权的问题。
在这里，仅仅通过用户ID（钥匙），就可以得到这个用户的全部订单信息（锁A），本身就是很危险的（但其实很多很多service，都有一样的问题，不一一列举）
而这里更过分的是不仅仅有订单信息，还有用户敏感信息（锁B），如身份证/手机号码/住宅地址等；
当然如果你觉得这就是结束，那就高估这不给力的service了。
神州还有一个本身逻辑存在严重缺陷的设计：通过用户ID+身份证+新密码 即可修改掉用户原有密码（而且貌似是不会通知用户的 T_T）。
而神州是有推出过VIP充值服务的（额，尽管有很多负面报道），所以这意味着，你可以改掉某个VIP的密码，然后免费租车。。。（什么？你说驾照要复印？你开玩笑的吧，这种hack就像小时候学家长签字一样，毫无技术含量啊。。。）
当我看到这里的时候我开始有点担心这设计者的前途了，万一被别人知道就是你设计出来这么渣的系统。。。唉。。。你以后怎么办啊。。。
好吧，换个角度，其实可以发起一次这样的数据扫描+毁灭性打击：
 遍历所有的用户id（你累加id就好了，目测神州用户不超过300W，额，目测，别问我怎么知道的。。。），可以得到所有的用户身份信息（而且基本都是真实靠谱可用的） == 数据扫描，done；该干嘛干嘛。。。
 遍历修改所有用户的密码（ID+身份证+新密码） == 打击，done；神州彻底废了。。。
  对于神州来说，针对这个问题，改动其实会很大，原因是这涉及到应用架构的改变，换言之，要彻底改掉这个问题，神州需要要求所有的用户进行至少一次APP升级，而其内部进行若干次service升级。
OK，就这样吧。给神州一点时间好好修改，毕竟是打算上市的公司，给点后路。
具体到代码层面的东西明眼人都明白，太细的就不说了。
另外这次神州中枪完全是我个人一时好奇，绝无针对性和恶意（我甚至还用神州租过车，唉，悔不当初）。
后来我又顺路去看了看一嗨和安飞士（这两个名字都是哪路神仙想出来的。。？）也有问题，但是相比较神州，轻微很多，以后再表。
BTW，如果神州愿意出点小钱让我帮忙改改，OY～ 我是会考虑的～ 哈哈哈～</description>
    </item>
    
    <item>
      <title>about git undo</title>
      <link>/posts/about-git-undo/</link>
      <pubDate>Tue, 11 Jun 2013 03:20:37 +0000</pubDate>
      
      <guid>/posts/about-git-undo/</guid>
      <description>git is a powerful tool but really hard to pick up soon.
and I found one article is very good at git undo: [the second comment]
 http://stackoverflow.com/questions/927358/how-to-undo-the-last-git-commit
 </description>
    </item>
    
    <item>
      <title>about putty auto close</title>
      <link>/posts/about-putty-auto-close/</link>
      <pubDate>Tue, 11 Jun 2013 03:14:53 +0000</pubDate>
      
      <guid>/posts/about-putty-auto-close/</guid>
      <description>Putty-auto-close may caused by server error like &amp;ldquo;too many logins to user &#39;xxx&#39; &amp;ldquo;.
You can fix it by these steps:
 login to server as admin
 vim /etc/security/limits.conf
 modify the limitation or add new one line as :
  @xxx hard maxlogins 100
and I&amp;rsquo;m sure you must have known what the xxx and 100 mean.</description>
    </item>
    
    <item>
      <title>神州租车的数据安全问题(secure problem of ZuChe.com)</title>
      <link>/posts/shen-zhou-zu-che-de-shu-ju-an-quan-wen-ti-secure-problem-of-zuche-com/</link>
      <pubDate>Wed, 29 May 2013 22:37:38 +0000</pubDate>
      
      <guid>/posts/shen-zhou-zu-che-de-shu-ju-an-quan-wen-ti-secure-problem-of-zuche-com/</guid>
      <description>说实话我不知道从何开始写，我发现了神州租车的一些，问题；而且非常严重。
我曾经试图联系他们，但是没有得到任何反馈，所以我决定写出来，作为一个记录。
当然，通过我的分析及实践，可以进一步得到它的用户数据，甚至进行修改或破坏，但这不是我的初衷，所以这里会做一些模糊处理（相信官方补丁会跑在那些有心者前面）。
直接拆开它的apk【其实如果用sniffer之类的，会比我这么做来的更直接；我这么做的原因就是顺手而已。】
可以得到对应的源文件，通过一些简单的代码和逻辑分析（几乎没有混淆），可以得到两个很霸道的接口，一个接口是通过user id来获取对应该用户所有订单信息的，获取到的内容可能如下：
&amp;lt;soap:Envelope xmlns:soap=&amp;quot;http://schemas.xmlsoap.org/soap/envelope/&amp;quot; xmlns:xsd=&amp;quot;http://www.w3.org/2001/XMLSchema&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&amp;gt;; &amp;lt;;soap:Body&amp;gt;; &amp;lt;;OrderListQueryResponse xmlns=&amp;quot;http://tempuri.org/&amp;quot;&amp;gt;; &amp;lt;;OrderListQueryResult xmlns=&amp;quot;http://tempuri.org/&amp;quot;&amp;gt;; &amp;lt;;CurrentPage xmlns=&amp;quot;OrderListQueryResult&amp;quot;&amp;gt;;1&amp;lt;;/CurrentPage&amp;gt;; &amp;lt;;OrderList xmlns=&amp;quot;OrderListQueryResult&amp;quot;&amp;gt;;&amp;lt;;ns1:OrderValue xmlns:ns1=&amp;quot;OrderValue&amp;quot;&amp;gt;; &amp;lt;;Address xmlns=&amp;quot;OrderValue&amp;quot;&amp;gt;; &amp;lt;span style=&amp;quot;color: #ff0000;&amp;quot;&amp;gt; &amp;lt;strong&amp;gt;南宁市西乡塘区北湖路西三里20号【模糊】401号房&amp;lt;/strong&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;;/Address&amp;gt;; &amp;lt;;CarType xmlns=&amp;quot;OrderValue&amp;quot;&amp;gt;;标致207/三厢/1.4手动&amp;lt;;/CarType&amp;gt;; &amp;lt;;Comments xmlns=&amp;quot;OrderValue&amp;quot;&amp;gt;;&amp;lt;;/Comments&amp;gt;; &amp;lt;;DrivingLicenceNo xmlns=&amp;quot;OrderValue&amp;quot;&amp;gt;;null&amp;lt;;/DrivingLicenceNo&amp;gt;; &amp;lt;;Email xmlns=&amp;quot;OrderValue&amp;quot;&amp;gt;;&amp;lt;;/Email&amp;gt;; &amp;lt;;FromAddr xmlns=&amp;quot;OrderValue&amp;quot;&amp;gt;;null&amp;lt;;/FromAddr&amp;gt;;&amp;lt;;FromCity xmlns=&amp;quot;OrderValue&amp;quot;&amp;gt;;南宁&amp;lt;;/FromCity&amp;gt;; &amp;lt;;FromDate xmlns=&amp;quot;OrderValue&amp;quot;&amp;gt;;2013-04-08 12:00 &amp;lt;;/FromDate&amp;gt;; &amp;lt;;FromProvince xmlns=&amp;quot;OrderValue&amp;quot;&amp;gt;;广西壮族自治区&amp;lt;;/FromProvince&amp;gt;; &amp;lt;;FromStore xmlns=&amp;quot;OrderValue&amp;quot;&amp;gt;;广西体育馆店&amp;lt;;/FromStore&amp;gt;; &amp;lt;;IdCardNo xmlns=&amp;quot;OrderValue&amp;quot;&amp;gt;; &amp;lt;span style=&amp;quot;color: #ff0000;&amp;quot;&amp;gt;&amp;lt;strong&amp;gt;450104【模糊】0510&amp;lt;/strong&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;;/IdCardNo&amp;gt;; &amp;lt;;IdCardType xmlns=&amp;quot;OrderValue&amp;quot;&amp;gt;;10&amp;lt;;/IdCardType&amp;gt;; &amp;lt;;InsuranceFee xmlns=&amp;quot;OrderValue&amp;quot;&amp;gt;;30.0&amp;lt;;/InsuranceFee&amp;gt;; &amp;lt;;Mobile xmlns=&amp;quot;OrderValue&amp;quot;&amp;gt;; &amp;lt;strong&amp;gt;&amp;lt;span style=&amp;quot;color: #ff0000;&amp;quot;&amp;gt;158【模糊】1523&amp;lt;/span&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;;/Mobile&amp;gt;; &amp;lt;;OrderNo xmlns=&amp;quot;OrderValue&amp;quot;&amp;gt;;13653269673220 ? ? ?&amp;lt;;/OrderNo&amp;gt;; &amp;lt;;OrderStatus xmlns=&amp;quot;OrderValue&amp;quot;&amp;gt;;已完成&amp;lt;;/OrderStatus&amp;gt;; &amp;lt;;Picture xmlns=&amp;quot;OrderValue&amp;quot;&amp;gt;;http://static.zuchecdn.com/images/terminal/bj207.jpg&amp;lt;;/Picture&amp;gt;; &amp;lt;;ReturnAddr xmlns=&amp;quot;OrderValue&amp;quot;&amp;gt;;广西壮族自治区南宁市江南区星光大道3号广西体育馆&amp;lt;;/ReturnAddr&amp;gt;; &amp;lt;;ServiceFee xmlns=&amp;quot;OrderValue&amp;quot;&amp;gt;;20.</description>
    </item>
    
    <item>
      <title>开放信息间谍的全部源码并停止服务</title>
      <link>/posts/kai-fang-xin-xi-jian-die-de-quan-bu-yuan-ma-bing-ting-zhi-fu-wu/</link>
      <pubDate>Wed, 29 May 2013 22:02:26 +0000</pubDate>
      
      <guid>/posts/kai-fang-xin-xi-jian-die-de-quan-bu-yuan-ma-bing-ting-zhi-fu-wu/</guid>
      <description>出于很多考虑来做这件事情，最大的原因也许是：到现在为止没有因为这个项目收到一分钱。
唉。
好吧，开放源码了。
邮件服务器也close了。
之前的缓存服务器也直接drop table了。
这个项目到此为止吧。
下面源码不能直接编译通过，因为删除了一个加密用的文件。
但是影响不大。
可以从源码中学习到：
 短信/电话记录的拦截
 GPS/基站定位
 开机/拨号启动
 后台服务常驻
 与服务器的通信
  &amp;hellip;
下载链接：apk codes</description>
    </item>
    
    <item>
      <title>关于</title>
      <link>/about/</link>
      <pubDate>Thu, 20 Sep 2012 14:53:41 +0000</pubDate>
      
      <guid>/about/</guid>
      <description>###逆界
####技术
懂点C、会点Android、写过算法、做过App、搞过Kernel、折腾过VPS&amp;hellip;
Full-stack developer的方向，渣渣的命。
简单理解：P都不会。
####安全
我是小白`
####记录
关于我的你的他的她的它的 &amp;ndash; 那些无法忘却的过去
也许幼稚也许青涩也许矫情也许夸张也许不知所云也许无关痛痒
但
真心谢谢你们曾经陪伴。
 谢谢。 )
  ####书单
####观影单
About Copyright:
（Hope you have powerful enough anti-DDOS Mechanisms. ^_^）</description>
    </item>
    
  </channel>
</rss>